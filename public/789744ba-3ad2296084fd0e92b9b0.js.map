{"version":3,"sources":["webpack:///./node_modules/@splidejs/splide/dist/js/splide.esm.js"],"names":["factory","window","modules","installedModules","__webpack_require__","moduleId","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","states_namespaceObject","_extends","assign","target","arguments","length","source","apply","this","CREATED","MOUNTED","IDLE","MOVING","DESTROYED","keys","each","obj","callback","some","index","values","map","isObject","subject","merge","_ref","from","to","toArray","Array","isArray","between","m1","m2","Math","min","max","sprintf","format","replacements","replace","unit","type","parseFloat","pad","number","toPixel","root","div","applyStyle","position","width","append","clientWidth","dom_remove","find","elm","selector","querySelector","split","child","parent","tagOrClassName","children","filter","hasClass","tagName","tag","attrs","document","createElement","setAttribute","domify","html","innerHTML","firstChild","elms","forEach","parentElement","removeChild","appendChild","before","ref","insertBefore","styles","prop","style","addOrRemoveClasses","classes","remove","classList","addClass","removeClass","className","contains","getAttribute","removeAttribute","names","getRect","getBoundingClientRect","LOOP","transitions_slide","Splide","Components","list","endCallback","mount","Elements","on","e","start","destIndex","newIndex","prevIndex","coord","done","options","edgeIndex","Controller","speed","is","rewindSpeed","transition","easing","transform","x","y","fade","slides","track","height","clientHeight","setTimeout","error_error","message","console","error","MESSAGE_PREFIX","exist","Error","ROOT","STATUS_CLASSES","active","visible","loading","DEFAULTS","rewind","waitForTransition","fixedWidth","fixedHeight","heightRatio","autoWidth","autoHeight","perPage","perMove","clones","focus","gap","padding","arrows","arrowPath","pagination","autoplay","interval","pauseOnHover","pauseOnFocus","resetProgress","lazyLoad","preloadPages","keyboard","drag","dragAngleThreshold","swipeDistanceThreshold","flickVelocityThreshold","flickPower","flickMaxPages","direction","cover","accessibility","slideFocus","isNavigation","trimSpace","updateOnMove","throttle","destroy","breakpoints","slider","slide","container","arrow","prev","next","page","clone","progress","bar","play","pause","spinner","sr","i18n","first","last","slideX","pageX","_defineProperties","props","descriptor","configurable","writable","splide_Splide","curr","Element","Event","data","unsubscribe","item","removeEventListener","event","handler","events","addEventListener","push","off","emit","_len","args","_key","core_event","State","set","state","STATES","_o","_i","_c","_e","_t","Constructor","protoProps","staticProps","_proto","Extensions","Transition","_this","components","Component","toLowerCase","compose","component","required","undefined","mounted","visibility","sync","splide","sibling","_this$Event","concat","go","control","wait","add","refresh","completely","_this2","reverse","parseInt","created","components_options","JSON","parse","components_elements","Slides","id","uid","init","getClasses","Slide","findParts","collect","register","realIndex","SlideObject","STATUS_UPDATE_EVENTS","isClone","update","restoreStyles","_update","display","isActive","isVisible","trackRect","slideRect","top","bottom","left","right","isWithin","within","diff","abs","forVisibility","elements_slide","getSlide","getSlides","includeClones","getSlidesByPage","idx","toIndex","splice","images","querySelectorAll","count","img","onload","onerror","dom_loaded","rootClass","floor","controller","isLoop","newOptions","silently","trim","Track","matches","String","match","indicator","sign","toPage","parsePage","hasFocus","pageLength","edge","isRtl","ceil","components_track","Layout","isVertical","isFade","isRTL","isLoopPending","jump","newPosition","getTrimmedPosition","toCoord","onTransitionEnd","translate","cancel","shift","toPosition","innerSize","totalSize","size","minDistance","Infinity","slideIndex","distance","slideSize","offset","components_clones","cloneCount","Clones","getCloneCount","slice","cloneDeeply","generateClones","baseCount","dimension","fixedSize","cloneNode","func","timeout","layout","resize","totalHeight","totalWidth","slideHeight","slideWidth","margin","paddingTop","paddingBottom","offsetHeight","vertical","paddingLeft","paddingRight","listRect","offsetWidth","horizontal","getOwnPropertyDescriptor","maxWidth","drag_abs","startCoord","startInfo","currentInfo","isDragging","axis","Drag","disabled","move","passive","end","preventDefault","analyze","cancelable","_start","_end","log","resist","angle","atan","PI","shouldMove","info","velocity","absV","destination","timeStamp","touches","_ref2","clientX","clientY","_ref3","_ref3$x","fromX","_ref3$y","duration","time","click","onClick","stopPropagation","stopImmediatePropagation","capture","PAUSE_FLAGS","components_arrows","updateDisabled","_Components$Controlle","nextIndex","isEnough","createArrow","wrapper","firstElementChild","appendArrows","components_pagination","Pagination","items","li","button","updateAttributes","getItem","KEY_MAP","ltr","ArrowLeft","ArrowRight","Left","Right","rtl","ttb","ArrowUp","ArrowDown","Up","Down","a11y","allAttributes","updateSlide","initArrows","controls","updateArrows","prevLabel","nextLabel","initPagination","activeItem","label","join","updatePagination","initNavigation","main","isButton","mainSlide","updateNavigation","Arrows","TRIGGER_KEYS","COMPLETE","Options","Breakpoints","initialOptions","prevPoint","throttledCheck","check","point","mql","matchMedia","sort","Click","Autoplay","flags","elapse","rate","requestAnimationFrame","_pause","step","timestamp","reset","createInterval","switchOn","flag","f","indexOf","Cover","uncover","src","background","LazyLoad","isSequential","isNaN","image","load","loaded","loadNext","srcset","Keyboard","Sync","syncMain","syncSibling","moveSibling","A11y","module_Splide","_Core","subClass","superClass","constructor","__proto__"],"mappings":"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","file":"789744ba-3ad2296084fd0e92b9b0.js","sourcesContent":["/*!\n * Splide.js\n * Version  : 2.4.14\n * License  : MIT\n * Copyright: 2020 Naotoshi Fujita\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"Splide\"] = factory();else root[\"Splide\"] = factory();\n})(window, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\n          __webpack_require__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\"; // ESM COMPAT FLAG\n\n      __webpack_require__.r(__webpack_exports__); // EXPORTS\n\n\n      __webpack_require__.d(__webpack_exports__, \"default\", function () {\n        return (\n          /* binding */\n          module_Splide\n        );\n      }); // NAMESPACE OBJECT: ./src/js/constants/states.js\n\n\n      var states_namespaceObject = {};\n\n      __webpack_require__.r(states_namespaceObject);\n\n      __webpack_require__.d(states_namespaceObject, \"CREATED\", function () {\n        return CREATED;\n      });\n\n      __webpack_require__.d(states_namespaceObject, \"MOUNTED\", function () {\n        return MOUNTED;\n      });\n\n      __webpack_require__.d(states_namespaceObject, \"IDLE\", function () {\n        return IDLE;\n      });\n\n      __webpack_require__.d(states_namespaceObject, \"MOVING\", function () {\n        return MOVING;\n      });\n\n      __webpack_require__.d(states_namespaceObject, \"DESTROYED\", function () {\n        return DESTROYED;\n      }); // CONCATENATED MODULE: ./src/js/core/event.js\n\n      /**\r\n       * The function for providing an Event object simply managing events.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The function for providing an Event object simply managing events.\r\n       */\n\n      /* harmony default export */\n\n\n      var core_event = function core_event() {\n        /**\r\n         * Store all event data.\r\n         *\r\n         * @type {Array}\r\n         */\n        var data = [];\n        var Event = {\n          /**\r\n           * Subscribe the given event(s).\r\n           *\r\n           * @param {string}   events  - An event name. Use space to separate multiple events.\r\n           *                             Also, namespace is accepted by dot, such as 'resize.{namespace}'.\r\n           * @param {function} handler - A callback function.\r\n           * @param {Element}  elm     - Optional. Native event will be listened to when this arg is provided.\r\n           * @param {Object}   options - Optional. Options for addEventListener.\r\n           */\n          on: function on(events, handler, elm, options) {\n            if (elm === void 0) {\n              elm = null;\n            }\n\n            if (options === void 0) {\n              options = {};\n            }\n\n            events.split(' ').forEach(function (event) {\n              if (elm) {\n                elm.addEventListener(event, handler, options);\n              }\n\n              data.push({\n                event: event,\n                handler: handler,\n                elm: elm,\n                options: options\n              });\n            });\n          },\n\n          /**\r\n           * Unsubscribe the given event(s).\r\n           *\r\n           * @param {string}  events - A event name or names split by space.\r\n           * @param {Element} elm    - Optional. removeEventListener() will be called when this arg is provided.\r\n           */\n          off: function off(events, elm) {\n            if (elm === void 0) {\n              elm = null;\n            }\n\n            events.split(' ').forEach(function (event) {\n              data = data.filter(function (item) {\n                if (item && item.event === event && item.elm === elm) {\n                  unsubscribe(item);\n                  return false;\n                }\n\n                return true;\n              });\n            });\n          },\n\n          /**\r\n           * Emit an event.\r\n           * This method is only for custom events.\r\n           *\r\n           * @param {string}  event - An event name.\r\n           * @param {*}       args  - Any number of arguments passed to handlers.\r\n           */\n          emit: function emit(event) {\n            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              args[_key - 1] = arguments[_key];\n            }\n\n            data.forEach(function (item) {\n              if (!item.elm && item.event.split('.')[0] === event) {\n                item.handler.apply(item, args);\n              }\n            });\n          },\n\n          /**\r\n           * Clear event data.\r\n           */\n          destroy: function destroy() {\n            data.forEach(unsubscribe);\n            data = [];\n          }\n        };\n        /**\r\n         * Remove the registered event listener.\r\n         *\r\n         * @param {Object} item - An object containing event data.\r\n         */\n\n        function unsubscribe(item) {\n          if (item.elm) {\n            item.elm.removeEventListener(item.event, item.handler, item.options);\n          }\n        }\n\n        return Event;\n      }; // CONCATENATED MODULE: ./src/js/core/state.js\n\n      /**\r\n       * The function providing a super simple state system.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The function providing a super simple state system.\r\n       *\r\n       * @param {string|number} initialState - Provide the initial state value.\r\n       */\n\n      /* harmony default export */\n\n\n      var state = function state(initialState) {\n        /**\r\n         * Store the current state.\r\n         *\r\n         * @type {string|number}\r\n         */\n        var curr = initialState;\n        return {\n          /**\r\n           * Change state.\r\n           *\r\n           * @param {string|number} state - A new state.\r\n           */\n          set: function set(state) {\n            curr = state;\n          },\n\n          /**\r\n           * Verify if the current state is given one or not.\r\n           *\r\n           * @param {string|number} state - A state name to be verified.\r\n           *\r\n           * @return {boolean} - True if the current state is the given one.\r\n           */\n          is: function is(state) {\n            return state === curr;\n          }\n        };\n      }; // CONCATENATED MODULE: ./src/js/utils/object.js\n\n\n      function _extends() {\n        _extends = Object.assign || function (target) {\n          for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            for (var key in source) {\n              if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n              }\n            }\n          }\n\n          return target;\n        };\n\n        return _extends.apply(this, arguments);\n      }\n      /**\r\n       * Some utility functions related with Object, supporting IE.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n\n      var keys = Object.keys;\n      /**\r\n       * Iterate an object like Array.forEach.\r\n       * IE doesn't support forEach of HTMLCollection.\r\n       *\r\n       * @param {Object}    obj       - An object.\r\n       * @param {function}  callback  - A function handling each value. Arguments are value, property and index.\r\n       */\n\n      function each(obj, callback) {\n        keys(obj).some(function (key, index) {\n          return callback(obj[key], key, index);\n        });\n      }\n      /**\r\n       * Return values of the given object as an array.\r\n       * IE doesn't support Object.values.\r\n       *\r\n       * @param {Object} obj - An object.\r\n       *\r\n       * @return {Array} - An array containing all values of the given object.\r\n       */\n\n\n      function values(obj) {\n        return keys(obj).map(function (key) {\n          return obj[key];\n        });\n      }\n      /**\r\n       * Check if the given subject is object or not.\r\n       *\r\n       * @param {*} subject - A subject to be verified.\r\n       *\r\n       * @return {boolean} - True if object, false otherwise.\r\n       */\n\n\n      function isObject(subject) {\n        return typeof subject === 'object';\n      }\n      /**\r\n       * Merge two objects deeply.\r\n       *\r\n       * @param {Object} to   - An object where \"from\" is merged.\r\n       * @param {Object} from - An object merged to \"to\".\r\n       *\r\n       * @return {Object} - A merged object.\r\n       */\n\n\n      function merge(_ref, from) {\n        var to = _extends({}, _ref);\n\n        each(from, function (value, key) {\n          if (isObject(value)) {\n            if (!isObject(to[key])) {\n              to[key] = {};\n            }\n\n            to[key] = merge(to[key], value);\n          } else {\n            to[key] = value;\n          }\n        });\n        return to;\n      }\n      /**\r\n       * Assign all properties \"from\" to \"to\" object.\r\n       *\r\n       * @param {Object} to   - An object where properties are assigned.\r\n       * @param {Object} from - An object whose properties are assigned to \"to\".\r\n       *\r\n       * @return {Object} - An assigned object.\r\n       */\n\n\n      function object_assign(to, from) {\n        keys(from).forEach(function (key) {\n          if (!to[key]) {\n            Object.defineProperty(to, key, Object.getOwnPropertyDescriptor(from, key));\n          }\n        });\n        return to;\n      } // CONCATENATED MODULE: ./src/js/utils/utils.js\n\n      /**\r\n       * A package of some miscellaneous utility functions.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Convert the given value to array.\r\n       *\r\n       * @param {*} value - Any value.\r\n       *\r\n       * @return {*[]} - Array containing the given value.\r\n       */\n\n\n      function toArray(value) {\n        return Array.isArray(value) ? value : [value];\n      }\n      /**\r\n       * Check if the given value is between min and max.\r\n       * Min will be returned when the value is less than min or max will do when greater than max.\r\n       *\r\n       * @param {number} value - A number to be checked.\r\n       * @param {number} m1    - Minimum or maximum number.\r\n       * @param {number} m2    - Maximum or minimum number.\r\n       *\r\n       * @return {number} - A value itself, min or max.\r\n       */\n\n\n      function between(value, m1, m2) {\n        return Math.min(Math.max(value, m1 > m2 ? m2 : m1), m1 > m2 ? m1 : m2);\n      }\n      /**\r\n       * The sprintf method with minimum functionality.\r\n       *\r\n       * @param {string}       format       - The string format.\r\n       * @param {string|Array} replacements - Replacements accepting multiple arguments.\r\n       *\r\n       * @returns {string} - Converted string.\r\n       */\n\n\n      function sprintf(format, replacements) {\n        var i = 0;\n        return format.replace(/%s/g, function () {\n          return toArray(replacements)[i++];\n        });\n      }\n      /**\r\n       * Append px unit to the given subject if necessary.\r\n       *\r\n       * @param {number|string} value - A value that may not include an unit.\r\n       *\r\n       * @return {string} - If the value is string, return itself.\r\n       *                    If number, do value + \"px\". An empty string, otherwise.\r\n       */\n\n\n      function unit(value) {\n        var type = typeof value;\n\n        if (type === 'number' && value > 0) {\n          return parseFloat(value) + 'px';\n        }\n\n        return type === 'string' ? value : '';\n      }\n      /**\r\n       * Pad start with 0.\r\n       *\r\n       * @param {number} number - A number to be filled with 0.\r\n       *\r\n       * @return {string|number} - Padded number.\r\n       */\n\n\n      function pad(number) {\n        return number < 10 ? '0' + number : number;\n      }\n      /**\r\n       * Convert the given value to pixel.\r\n       *\r\n       * @param {Element}       root  - Root element where a dummy div is appended.\r\n       * @param {string|number} value - CSS value to be converted, such as 10rem.\r\n       *\r\n       * @return {number} - Pixel.\r\n       */\n\n\n      function toPixel(root, value) {\n        if (typeof value === 'string') {\n          var div = create('div', {});\n          applyStyle(div, {\n            position: 'absolute',\n            width: value\n          });\n          append(root, div);\n          value = div.clientWidth;\n          dom_remove(div);\n        }\n\n        return +value || 0;\n      } // CONCATENATED MODULE: ./src/js/utils/dom.js\n\n      /**\r\n       * Some utility functions related with DOM.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Find the first element matching the given selector.\r\n       * Be aware that all selectors after a space are ignored.\r\n       *\r\n       * @param {Element|Node}  elm       - An ancestor element.\r\n       * @param {string}        selector  - DOMString.\r\n       *\r\n       * @return {Element|null} - A found element or null.\r\n       */\n\n\n      function find(elm, selector) {\n        return elm ? elm.querySelector(selector.split(' ')[0]) : null;\n      }\n      /**\r\n       * Find a first child having the given tag or class name.\r\n       *\r\n       * @param {Element} parent         - A parent element.\r\n       * @param {string}  tagOrClassName - A tag or class name.\r\n       *\r\n       * @return {Element|undefined} - A found element on success or undefined on failure.\r\n       */\n\n\n      function child(parent, tagOrClassName) {\n        return children(parent, tagOrClassName)[0];\n      }\n      /**\r\n       * Return chile elements that matches the provided tag or class name.\r\n       *\r\n       * @param {Element} parent         - A parent element.\r\n       * @param {string}  tagOrClassName - A tag or class name.\r\n       *\r\n       * @return {Element[]} - Found elements.\r\n       */\n\n\n      function children(parent, tagOrClassName) {\n        if (parent) {\n          return values(parent.children).filter(function (child) {\n            return hasClass(child, tagOrClassName.split(' ')[0]) || child.tagName === tagOrClassName;\n          });\n        }\n\n        return [];\n      }\n      /**\r\n       * Create an element with some optional attributes.\r\n       *\r\n       * @param {string} tag   - A tag name.\r\n       * @param {Object} attrs - An object any attribute pairs of name and value.\r\n       *\r\n       * @return {Element} - A created element.\r\n       */\n\n\n      function create(tag, attrs) {\n        var elm = document.createElement(tag);\n        each(attrs, function (value, key) {\n          return setAttribute(elm, key, value);\n        });\n        return elm;\n      }\n      /**\r\n       * Convert HTML string to DOM node.\r\n       *\r\n       * @param {string} html - HTML string.\r\n       *\r\n       * @return {Node} - A created node.\r\n       */\n\n\n      function domify(html) {\n        var div = create('div', {});\n        div.innerHTML = html;\n        return div.firstChild;\n      }\n      /**\r\n       * Remove a given element from a DOM tree.\r\n       *\r\n       * @param {Element|Element[]} elms - Element(s) to be removed.\r\n       */\n\n\n      function dom_remove(elms) {\n        toArray(elms).forEach(function (elm) {\n          if (elm) {\n            var parent = elm.parentElement;\n            parent && parent.removeChild(elm);\n          }\n        });\n      }\n      /**\r\n       * Append a child to a given element.\r\n       *\r\n       * @param {Element} parent - A parent element.\r\n       * @param {Element} child  - An element to be appended.\r\n       */\n\n\n      function append(parent, child) {\n        if (parent) {\n          parent.appendChild(child);\n        }\n      }\n      /**\r\n       * Insert an element before the reference element.\r\n       *\r\n       * @param {Element|Node} ref - A reference element.\r\n       * @param {Element}      elm - An element to be inserted.\r\n       */\n\n\n      function before(elm, ref) {\n        if (elm && ref) {\n          var parent = ref.parentElement;\n          parent && parent.insertBefore(elm, ref);\n        }\n      }\n      /**\r\n       * Apply styles to the given element.\r\n       *\r\n       * @param {Element} elm     - An element where styles are applied.\r\n       * @param {Object}  styles  - Object containing styles.\r\n       */\n\n\n      function applyStyle(elm, styles) {\n        if (elm) {\n          each(styles, function (value, prop) {\n            if (value !== null) {\n              elm.style[prop] = value;\n            }\n          });\n        }\n      }\n      /**\r\n       * Add or remove classes to/from the element.\r\n       * This function is for internal usage.\r\n       *\r\n       * @param {Element}         elm     - An element where classes are added.\r\n       * @param {string|string[]} classes - Class names being added.\r\n       * @param {boolean}         remove  - Whether to remove or add classes.\r\n       */\n\n\n      function addOrRemoveClasses(elm, classes, remove) {\n        if (elm) {\n          toArray(classes).forEach(function (name) {\n            if (name) {\n              elm.classList[remove ? 'remove' : 'add'](name);\n            }\n          });\n        }\n      }\n      /**\r\n       * Add classes to the element.\r\n       *\r\n       * @param {Element}          elm     - An element where classes are added.\r\n       * @param {string|string[]}  classes - Class names being added.\r\n       */\n\n\n      function addClass(elm, classes) {\n        addOrRemoveClasses(elm, classes, false);\n      }\n      /**\r\n       * Remove a class from the element.\r\n       *\r\n       * @param {Element}         elm     - An element where classes are removed.\r\n       * @param {string|string[]} classes - A class name being removed.\r\n       */\n\n\n      function removeClass(elm, classes) {\n        addOrRemoveClasses(elm, classes, true);\n      }\n      /**\r\n       * Verify if the provided element has the class or not.\r\n       *\r\n       * @param {Element} elm       - An element.\r\n       * @param {string}  className - A class name.\r\n       *\r\n       * @return {boolean} - True if the element has the class or false if not.\r\n       */\n\n\n      function hasClass(elm, className) {\n        return !!elm && elm.classList.contains(className);\n      }\n      /**\r\n       * Set attribute to the given element.\r\n       *\r\n       * @param {Element}                 elm   - An element where an attribute is assigned.\r\n       * @param {string}                  name  - Attribute name.\r\n       * @param {string|number|boolean}   value - Attribute value.\r\n       */\n\n\n      function setAttribute(elm, name, value) {\n        if (elm) {\n          elm.setAttribute(name, value);\n        }\n      }\n      /**\r\n       * Get attribute from the given element.\r\n       *\r\n       * @param {Element} elm  - An element where an attribute is assigned.\r\n       * @param {string}  name - Attribute name.\r\n       *\r\n       * @return {string} - The value of the given attribute if available. An empty string if not.\r\n       */\n\n\n      function getAttribute(elm, name) {\n        return elm ? elm.getAttribute(name) : '';\n      }\n      /**\r\n       * Remove attribute from the given element.\r\n       *\r\n       * @param {Element|Element[]} elms  - An element where an attribute is removed.\r\n       * @param {string|string[]}      names - Attribute name.\r\n       */\n\n\n      function removeAttribute(elms, names) {\n        toArray(names).forEach(function (name) {\n          toArray(elms).forEach(function (elm) {\n            return elm && elm.removeAttribute(name);\n          });\n        });\n      }\n      /**\r\n       * Return the Rect object of the provided object.\r\n       *\r\n       * @param {Element} elm - An element.\r\n       *\r\n       * @return {ClientRect|DOMRect} - A rect object.\r\n       */\n\n\n      function getRect(elm) {\n        return elm.getBoundingClientRect();\n      }\n      /**\r\n       * Trigger the given callback after all images contained by the element are loaded.\r\n       *\r\n       * @param {Element}  elm      - Element that may contain images.\r\n       * @param {Function} callback - Callback function fired right after all images are loaded.\r\n       */\n\n\n      function dom_loaded(elm, callback) {\n        var images = elm.querySelectorAll('img');\n        var length = images.length;\n\n        if (length) {\n          var count = 0;\n          each(images, function (img) {\n            img.onload = img.onerror = function () {\n              if (++count === length) {\n                callback();\n              }\n            };\n          });\n        } else {\n          // Trigger the callback immediately if there is no image.\n          callback();\n        }\n      } // CONCATENATED MODULE: ./src/js/constants/types.js\n\n      /**\r\n       * Export slider types.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Normal slider.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var SLIDE = 'slide';\n      /**\r\n       * Loop after the last slide and before the first one.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var LOOP = 'loop';\n      /**\r\n       * The track doesn't move.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var FADE = 'fade'; // CONCATENATED MODULE: ./src/js/transitions/slide/index.js\n\n      /**\r\n       * The component for general slide effect transition.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The component for general slide effect transition.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var transitions_slide = function transitions_slide(Splide, Components) {\n        /**\r\n         * Hold the list element.\r\n         *\r\n         * @type {Element}\r\n         */\n        var list;\n        /**\r\n         * Hold the onEnd callback function.\r\n         *\r\n         * @type {function}\r\n         */\n\n        var endCallback;\n        return {\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            list = Components.Elements.list;\n            Splide.on('transitionend', function (e) {\n              if (e.target === list && endCallback) {\n                endCallback();\n              }\n            }, list);\n          },\n\n          /**\r\n           * Start transition.\r\n           *\r\n           * @param {number}   destIndex - Destination slide index that might be clone's.\r\n           * @param {number}   newIndex  - New index.\r\n           * @param {number}   prevIndex - Previous index.\r\n           * @param {Object}   coord     - Destination coordinates.\r\n           * @param {function} done      - Callback function must be invoked when transition is completed.\r\n           */\n          start: function start(destIndex, newIndex, prevIndex, coord, done) {\n            var options = Splide.options;\n            var edgeIndex = Components.Controller.edgeIndex;\n            var speed = options.speed;\n            endCallback = done;\n\n            if (Splide.is(SLIDE)) {\n              if (prevIndex === 0 && newIndex >= edgeIndex || prevIndex >= edgeIndex && newIndex === 0) {\n                speed = options.rewindSpeed || speed;\n              }\n            }\n\n            applyStyle(list, {\n              transition: \"transform \" + speed + \"ms \" + options.easing,\n              transform: \"translate(\" + coord.x + \"px,\" + coord.y + \"px)\"\n            });\n          }\n        };\n      }; // CONCATENATED MODULE: ./src/js/transitions/fade/index.js\n\n      /**\r\n       * The component for fade transition.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The component for fade transition.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n\n      var fade = function fade(Splide, Components) {\n        var Fade = {\n          /**\r\n           * Called when the component is mounted.\r\n           * Apply transition style to the first slide.\r\n           */\n          mount: function mount() {\n            apply(Splide.index);\n          },\n\n          /**\r\n           * Start transition.\r\n           *\r\n           * @param {number}    destIndex - Destination slide index that might be clone's.\r\n           * @param {number}    newIndex  - New index.\r\n           * @param {number}    prevIndex - Previous index.\r\n           * @param {Object}    coord     - Destination coordinates.\r\n           * @param {function}  done      - Callback function must be invoked when transition is completed.\r\n           */\n          start: function start(destIndex, newIndex, prevIndex, coord, done) {\n            var track = Components.Elements.track;\n            applyStyle(track, {\n              height: unit(track.clientHeight)\n            });\n            apply(newIndex);\n            setTimeout(function () {\n              done();\n              applyStyle(track, {\n                height: ''\n              });\n            });\n          }\n        };\n        /**\r\n         * Apply transition style to the slide specified by the given index.\r\n         *\r\n         * @param {number} index - A slide index.\r\n         */\n\n        function apply(index) {\n          var options = Splide.options;\n          applyStyle(Components.Elements.slides[index], {\n            transition: \"opacity \" + options.speed + \"ms \" + options.easing\n          });\n        }\n\n        return Fade;\n      }; // CONCATENATED MODULE: ./src/js/transitions/index.js\n\n      /**\r\n       * Export transition components.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n      // CONCATENATED MODULE: ./src/js/core/composer.js\n\n      /**\r\n       * Provide a function for composing components.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Compose components.\r\n       *\r\n       * @param {Splide}   Splide     - Splide instance.\r\n       * @param {Object}   Components - Additional components.\r\n       * @param {function} Transition - Change component for transition.\r\n       *\r\n       * @return {Object} - An object containing all components.\r\n       */\n\n\n      function compose(Splide, Components, Transition) {\n        var components = {};\n        each(Components, function (Component, name) {\n          components[name] = Component(Splide, components, name.toLowerCase());\n        });\n\n        if (!Transition) {\n          Transition = Splide.is(FADE) ? fade : transitions_slide;\n        }\n\n        components.Transition = Transition(Splide, components);\n        return components;\n      } // CONCATENATED MODULE: ./src/js/utils/error.js\n\n      /**\r\n       * Utility functions for outputting logs.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Prefix of an error massage.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var MESSAGE_PREFIX = '[SPLIDE]';\n      /**\r\n       * Display an error message on the browser console.\r\n       *\r\n       * @param {string} message - An error message.\r\n       */\n\n      function error_error(message) {\n        console.error(MESSAGE_PREFIX + \" \" + message);\n      }\n      /**\r\n       * Check existence of the given object and throw an error if it doesn't.\r\n       *\r\n       * @throws {Error}\r\n       *\r\n       * @param {*}      subject - A subject to be confirmed.\r\n       * @param {string} message - An error message.\r\n       */\n\n\n      function exist(subject, message) {\n        if (!subject) {\n          throw new Error(message);\n        }\n      } // CONCATENATED MODULE: ./src/js/constants/classes.js\n\n      /**\r\n       * Export class names.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * A root class name.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var ROOT = 'splide';\n      /**\r\n       * The definition table of all classes for elements.\r\n       * They might be modified by options.\r\n       *\r\n       * @type {Object}\r\n       */\n\n      var ELEMENT_CLASSES = {\n        root: ROOT,\n        slider: ROOT + \"__slider\",\n        track: ROOT + \"__track\",\n        list: ROOT + \"__list\",\n        slide: ROOT + \"__slide\",\n        container: ROOT + \"__slide__container\",\n        arrows: ROOT + \"__arrows\",\n        arrow: ROOT + \"__arrow\",\n        prev: ROOT + \"__arrow--prev\",\n        next: ROOT + \"__arrow--next\",\n        pagination: ROOT + \"__pagination\",\n        page: ROOT + \"__pagination__page\",\n        clone: ROOT + \"__slide--clone\",\n        progress: ROOT + \"__progress\",\n        bar: ROOT + \"__progress__bar\",\n        autoplay: ROOT + \"__autoplay\",\n        play: ROOT + \"__play\",\n        pause: ROOT + \"__pause\",\n        spinner: ROOT + \"__spinner\",\n        sr: ROOT + \"__sr\"\n      };\n      /**\r\n       * Definitions of status classes.\r\n       *\r\n       * @type {Object}\r\n       */\n\n      var STATUS_CLASSES = {\n        active: 'is-active',\n        visible: 'is-visible',\n        loading: 'is-loading'\n      }; // CONCATENATED MODULE: ./src/js/constants/i18n.js\n\n      /**\r\n       * Export i18n texts as object.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Texts for i18n.\r\n       *\r\n       * @type {Object}\r\n       */\n\n      var I18N = {\n        prev: 'Previous slide',\n        next: 'Next slide',\n        first: 'Go to first slide',\n        last: 'Go to last slide',\n        slideX: 'Go to slide %s',\n        pageX: 'Go to page %s',\n        play: 'Start autoplay',\n        pause: 'Pause autoplay'\n      }; // CONCATENATED MODULE: ./src/js/constants/defaults.js\n\n      /**\r\n       * Export default options.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      var DEFAULTS = {\n        /**\r\n         * Determine a slider type.\r\n         * - 'slide': Regular slider.\r\n         * - 'loop' : Carousel slider.\r\n         * - 'fade' : Change slides with fade transition. perPage, drag options are ignored.\r\n         *\r\n         * @type {string}\r\n         */\n        type: 'slide',\n\n        /**\r\n         * Whether to rewind a slider before the first slide or after the last one.\r\n         * In \"loop\" mode, this option is ignored.\r\n         *\r\n         * @type {boolean}\r\n         */\n        rewind: false,\n\n        /**\r\n         * Transition speed in milliseconds.\r\n         *\r\n         * @type {number}\r\n         */\n        speed: 400,\n\n        /**\r\n         * Transition speed on rewind in milliseconds.\r\n         *\r\n         * @type {number}\r\n         */\n        rewindSpeed: 0,\n\n        /**\r\n         * Whether to prevent any actions while a slider is transitioning.\r\n         * If false, navigation, drag and swipe work while the slider is running.\r\n         * Even so, it will be forced to wait for transition in some cases in the loop mode to shift a slider.\r\n         *\r\n         * @type {boolean}\r\n         */\n        waitForTransition: true,\n\n        /**\r\n         * Define slider max width.\r\n         *\r\n         * @type {number}\r\n         */\n        width: 0,\n\n        /**\r\n         * Define slider height.\r\n         *\r\n         * @type {number}\r\n         */\n        height: 0,\n\n        /**\r\n         * Fix width of slides. CSS format is allowed such as 10em, 80% or 80vw.\r\n         * perPage number will be ignored when this option is falsy.\r\n         *\r\n         * @type {number|string}\r\n         */\n        fixedWidth: 0,\n\n        /**\r\n         * Fix height of slides. CSS format is allowed such as 10em, 80vh but % unit is not accepted.\r\n         * heightRatio option will be ignored when this option is falsy.\r\n         *\r\n         * @type {number|string}\r\n         */\n        fixedHeight: 0,\n\n        /**\r\n         * Determine height of slides by ratio to a slider width.\r\n         * This will be ignored when the fixedHeight is provided.\r\n         *\r\n         * @type {number}\r\n         */\n        heightRatio: 0,\n\n        /**\r\n         * If true, slide width will be determined by the element width itself.\r\n         * - perPage/perMove should be 1.\r\n         *\r\n         * @type {boolean}\r\n         */\n        autoWidth: false,\n\n        /**\r\n         * If true, slide height will be determined by the element width itself.\r\n         * - perPage/perMove should be 1.\r\n         *\r\n         * @type {boolean}\r\n         */\n        autoHeight: false,\n\n        /**\r\n         * Determine how many slides should be displayed per page.\r\n         *\r\n         * @type {number}\r\n         */\n        perPage: 1,\n\n        /**\r\n         * Determine how many slides should be moved when a slider goes to next or perv.\r\n         *\r\n         * @type {number}\r\n         */\n        perMove: 0,\n\n        /**\r\n         * Determine manually how many clones should be generated on the left and right side.\r\n         * The total number of clones will be twice of this number.\r\n         *\r\n         * @type {number}\r\n         */\n        clones: 0,\n\n        /**\r\n         * Start index.\r\n         *\r\n         * @type {number}\r\n         */\n        start: 0,\n\n        /**\r\n         * Determine which slide should be focused if there are multiple slides in a page.\r\n         * A string \"center\" is acceptable for centering slides.\r\n         *\r\n         * @type {boolean|number|string}\r\n         */\n        focus: false,\n\n        /**\r\n         * Gap between slides. CSS format is allowed such as 1em.\r\n         *\r\n         * @type {number|string}\r\n         */\n        gap: 0,\n\n        /**\r\n         * Set padding-left/right in horizontal mode or padding-top/bottom in vertical one.\r\n         * Give a single value to set a same size for both sides or\r\n         * do an object for different sizes.\r\n         * Also, CSS format is allowed such as 1em.\r\n         *\r\n         * @example\r\n         * - 10: Number\r\n         * - '1em': CSS format.\r\n         * - { left: 0, right: 20 }: Object for different sizes in horizontal mode.\r\n         * - { top: 0, bottom: 20 }: Object for different sizes in vertical mode.\r\n         *\r\n         * @type {number|string|Object}\r\n         */\n        padding: 0,\n\n        /**\r\n         * Whether to append arrows.\r\n         *\r\n         * @type {boolean}\r\n         */\n        arrows: true,\n\n        /**\r\n         * Change the arrow SVG path like 'm7.61 0.807-2.12...'.\r\n         *\r\n         * @type {string}\r\n         */\n        arrowPath: '',\n\n        /**\r\n         * Whether to append pagination(indicator dots) or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n        pagination: true,\n\n        /**\r\n         * Activate autoplay.\r\n         *\r\n         * @type {boolean}\r\n         */\n        autoplay: false,\n\n        /**\r\n         * Autoplay interval in milliseconds.\r\n         *\r\n         * @type {number}\r\n         */\n        interval: 5000,\n\n        /**\r\n         * Whether to stop autoplay when a slider is hovered.\r\n         *\r\n         * @type {boolean}\r\n         */\n        pauseOnHover: true,\n\n        /**\r\n         * Whether to stop autoplay when a slider elements are focused.\r\n         * True is recommended for accessibility.\r\n         *\r\n         * @type {boolean}\r\n         */\n        pauseOnFocus: true,\n\n        /**\r\n         * Whether to reset progress of the autoplay timer when resumed.\r\n         *\r\n         * @type {boolean}\r\n         */\n        resetProgress: true,\n\n        /**\r\n         * Loading images lazily.\r\n         * Image src must be provided by a data-splide-lazy attribute.\r\n         *\r\n         * - false: Do nothing.\r\n         * - 'nearby': Only images around an active slide will be loaded.\r\n         * - 'sequential': All images will be sequentially loaded.\r\n         *\r\n         * @type {boolean|string}\r\n         */\n        lazyLoad: false,\n\n        /**\r\n         * This option works only when a lazyLoad option is \"nearby\".\r\n         * Determine how many pages(not slides) around an active slide should be loaded beforehand.\r\n         *\r\n         * @type {number}\r\n         */\n        preloadPages: 1,\n\n        /**\r\n         * Easing for CSS transition. For example, linear, ease or cubic-bezier().\r\n         *\r\n         * @type {string}\r\n         */\n        easing: 'cubic-bezier(.42,.65,.27,.99)',\n\n        /**\r\n         * Whether to enable keyboard shortcuts\r\n         * - true or 'global': Listen to keydown event of the document.\r\n         * - 'focused': Listen to the keydown event of the slider root element. tabindex=\"0\" will be added to the element.\r\n         * - false: Disable keyboard shortcuts.\r\n         *\r\n         * @type {boolean|string}\r\n         */\n        keyboard: 'global',\n\n        /**\r\n         * Whether to allow mouse drag and touch swipe.\r\n         *\r\n         * @type {boolean}\r\n         */\n        drag: true,\n\n        /**\r\n         * The angle threshold for drag.\r\n         * The slider starts moving only when the drag angle is less than this threshold.\r\n         *\r\n         * @type {number}\r\n         */\n        dragAngleThreshold: 30,\n\n        /**\r\n         * Distance threshold for determining if the action is \"flick\" or \"swipe\".\r\n         * When a drag distance is over this value, the action will be treated as \"swipe\", not \"flick\".\r\n         *\r\n         * @type {number}\r\n         */\n        swipeDistanceThreshold: 150,\n\n        /**\r\n         * Velocity threshold for determining if the action is \"flick\" or \"swipe\".\r\n         * Around 0.5 is recommended.\r\n         *\r\n         * @type {number}\r\n         */\n        flickVelocityThreshold: .6,\n\n        /**\r\n         * Determine power of flick. The larger number this is, the farther a slider runs by flick.\r\n         * Around 500 is recommended.\r\n         *\r\n         * @type {number}\r\n         */\n        flickPower: 600,\n\n        /**\r\n         * Limit a number of pages to move by flick.\r\n         *\r\n         * @type {number}\r\n         */\n        flickMaxPages: 1,\n\n        /**\r\n         * Slider direction.\r\n         * - 'ltr': Left to right.\r\n         * - 'rtl': Right to left.\r\n         * - 'ttb': Top to bottom.\r\n         *\r\n         * @type {string}\r\n         */\n        direction: 'ltr',\n\n        /**\r\n         * Set img src to background-image of its parent element.\r\n         * Images with various sizes can be displayed as same dimension without cropping work.\r\n         * fixedHeight or heightRatio is required.\r\n         *\r\n         * @type {boolean}\r\n         */\n        cover: false,\n\n        /**\r\n         * Whether to enable accessibility(aria and screen reader texts) or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n        accessibility: true,\n\n        /**\r\n         * Whether to add tabindex=\"0\" to visible slides or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n        slideFocus: true,\n\n        /**\r\n         * Determine if a slider is navigation for another.\r\n         * Use \"sync\" API to synchronize two sliders.\r\n         *\r\n         * @type {boolean}\r\n         */\n        isNavigation: false,\n\n        /**\r\n         * Whether to trim spaces before the fist slide or after the last one when \"focus\" is not 0.\r\n         *\r\n         * @type {boolean}\r\n         */\n        trimSpace: true,\n\n        /**\r\n         * The \"is-active\" class is added after transition as default.\r\n         * If true, it will be added before move.\r\n         *\r\n         * @type {boolean}\r\n         */\n        updateOnMove: false,\n\n        /**\r\n         * Throttle duration in milliseconds for the resize event.\r\n         *\r\n         * @type {number}\r\n         */\n        throttle: 100,\n\n        /**\r\n         * Whether to destroy a slider or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n        destroy: false,\n\n        /**\r\n         * Options for specific breakpoints.\r\n         *\r\n         * @example\r\n         * {\r\n         *   1000: {\r\n         *     perPage: 3,\r\n         *     gap: 20\r\n         *   },\r\n         *   600: {\r\n         *     perPage: 1,\r\n         *     gap: 5,\r\n         *   }\r\n         * }\r\n         *\r\n         * @type {boolean|Object}\r\n         */\n        breakpoints: false,\n\n        /**\r\n         * Collection of class names.\r\n         *\r\n         * @see ./classes.js\r\n         *\r\n         * @type {Object}\r\n         */\n        classes: ELEMENT_CLASSES,\n\n        /**\r\n         * Collection of i18n texts.\r\n         *\r\n         * @see ./i18n.js\r\n         *\r\n         * @type {Object}\r\n         */\n        i18n: I18N\n      }; // CONCATENATED MODULE: ./src/js/constants/states.js\n\n      /**\r\n       * Export state constants.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Splide has been just created.\r\n       *\r\n       * @type {number}\r\n       */\n\n      var CREATED = 1;\n      /**\r\n       * All components have been mounted and initialized.\r\n       *\r\n       * @type {number}\r\n       */\n\n      var MOUNTED = 2;\n      /**\r\n       * Splide is ready for transition.\r\n       *\r\n       * @type {number}\r\n       */\n\n      var IDLE = 3;\n      /**\r\n       * Splide is moving.\r\n       *\r\n       * @type {number}\r\n       */\n\n      var MOVING = 4;\n      /**\r\n       * Splide is moving.\r\n       *\r\n       * @type {number}\r\n       */\n\n      var DESTROYED = 5; // CONCATENATED MODULE: ./src/js/splide.js\n\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /**\r\n       * The main class for applying Splide to an element.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The main class for applying Splide to an element,\r\n       * providing some APIs to control the behavior.\r\n       */\n\n\n      var splide_Splide = /*#__PURE__*/function () {\n        /**\r\n         * Splide constructor.\r\n         *\r\n         * @throws {Error} When the given root element or selector is invalid.\r\n         *\r\n         * @param {Element|string}  root       - A selector for a root element or an element itself.\r\n         * @param {Object}          options    - Optional. Options to change default behaviour.\r\n         * @param {Object}          Components - Optional. Components.\r\n         */\n        function Splide(root, options, Components) {\n          if (options === void 0) {\n            options = {};\n          }\n\n          if (Components === void 0) {\n            Components = {};\n          }\n\n          this.root = root instanceof Element ? root : document.querySelector(root);\n          exist(this.root, 'An invalid element/selector was given.');\n          this.Components = null;\n          this.Event = core_event();\n          this.State = state(CREATED);\n          this.STATES = states_namespaceObject;\n          this._o = merge(DEFAULTS, options);\n          this._i = 0;\n          this._c = Components;\n          this._e = {}; // Extensions\n\n          this._t = null; // Transition\n        }\n        /**\r\n         * Compose and mount components.\r\n         *\r\n         * @param {Object}   Extensions - Optional. Additional components.\r\n         * @param {function} Transition - Optional. Set a custom transition component.\r\n         *\r\n         * @return {Splide|undefined} - This instance or undefined if an exception occurred.\r\n         */\n\n\n        var _proto = Splide.prototype;\n\n        _proto.mount = function mount(Extensions, Transition) {\n          var _this = this;\n\n          if (Extensions === void 0) {\n            Extensions = this._e;\n          }\n\n          if (Transition === void 0) {\n            Transition = this._t;\n          } // Reset the state.\n\n\n          this.State.set(CREATED);\n          this._e = Extensions;\n          this._t = Transition;\n          this.Components = compose(this, merge(this._c, Extensions), Transition);\n\n          try {\n            each(this.Components, function (component, key) {\n              var required = component.required;\n\n              if (required === undefined || required) {\n                component.mount && component.mount();\n              } else {\n                delete _this.Components[key];\n              }\n            });\n          } catch (e) {\n            error_error(e.message);\n            return;\n          }\n\n          var State = this.State;\n          State.set(MOUNTED);\n          each(this.Components, function (component) {\n            component.mounted && component.mounted();\n          });\n          this.emit('mounted');\n          State.set(IDLE);\n          this.emit('ready');\n          applyStyle(this.root, {\n            visibility: 'visible'\n          });\n          this.on('move drag', function () {\n            return State.set(MOVING);\n          }).on('moved dragged', function () {\n            return State.set(IDLE);\n          });\n          return this;\n        }\n        /**\r\n         * Set sync target.\r\n         *\r\n         * @param {Splide} splide - A Splide instance.\r\n         *\r\n         * @return {Splide} - This instance.\r\n         */\n        ;\n\n        _proto.sync = function sync(splide) {\n          this.sibling = splide;\n          return this;\n        }\n        /**\r\n         * Register callback fired on the given event(s).\r\n         *\r\n         * @param {string}   events  - An event name. Use space to separate multiple events.\r\n         *                             Also, namespace is accepted by dot, such as 'resize.{namespace}'.\r\n         * @param {function} handler - A callback function.\r\n         * @param {Element}  elm     - Optional. Native event will be listened to when this arg is provided.\r\n         * @param {Object}   options - Optional. Options for addEventListener.\r\n         *\r\n         * @return {Splide} - This instance.\r\n         */\n        ;\n\n        _proto.on = function on(events, handler, elm, options) {\n          if (elm === void 0) {\n            elm = null;\n          }\n\n          if (options === void 0) {\n            options = {};\n          }\n\n          this.Event.on(events, handler, elm, options);\n          return this;\n        }\n        /**\r\n         * Unsubscribe the given event.\r\n         *\r\n         * @param {string}  events - A event name.\r\n         * @param {Element} elm    - Optional. removeEventListener() will be called when this arg is provided.\r\n         *\r\n         * @return {Splide} - This instance.\r\n         */\n        ;\n\n        _proto.off = function off(events, elm) {\n          if (elm === void 0) {\n            elm = null;\n          }\n\n          this.Event.off(events, elm);\n          return this;\n        }\n        /**\r\n         * Emit an event.\r\n         *\r\n         * @param {string} event - An event name.\r\n         * @param {*}      args  - Any number of arguments passed to handlers.\r\n         */\n        ;\n\n        _proto.emit = function emit(event) {\n          var _this$Event;\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          (_this$Event = this.Event).emit.apply(_this$Event, [event].concat(args));\n\n          return this;\n        }\n        /**\r\n         * Go to the slide specified by the given control.\r\n         *\r\n         * @param {string|number} control - A control pattern.\r\n         * @param {boolean}       wait    - Optional. Whether to wait for transition.\r\n         */\n        ;\n\n        _proto.go = function go(control, wait) {\n          if (wait === void 0) {\n            wait = this.options.waitForTransition;\n          }\n\n          if (this.State.is(IDLE) || this.State.is(MOVING) && !wait) {\n            this.Components.Controller.go(control, false);\n          }\n\n          return this;\n        }\n        /**\r\n         * Verify whether the slider type is the given one or not.\r\n         *\r\n         * @param {string} type - A slider type.\r\n         *\r\n         * @return {boolean} - True if the slider type is the provided type or false if not.\r\n         */\n        ;\n\n        _proto.is = function is(type) {\n          return type === this._o.type;\n        }\n        /**\r\n         * Insert a slide.\r\n         *\r\n         * @param {Element|string} slide - A slide element to be added.\r\n         * @param {number}         index - A slide will be added at the position.\r\n         */\n        ;\n\n        _proto.add = function add(slide, index) {\n          if (index === void 0) {\n            index = -1;\n          }\n\n          this.Components.Elements.add(slide, index, this.refresh.bind(this));\n          return this;\n        }\n        /**\r\n         * Remove the slide designated by the index.\r\n         *\r\n         * @param {number} index - A slide index.\r\n         */\n        ;\n\n        _proto.remove = function remove(index) {\n          this.Components.Elements.remove(index);\n          this.refresh();\n          return this;\n        }\n        /**\r\n         * Destroy all Slide objects and clones and recreate them again.\r\n         */\n        ;\n\n        _proto.refresh = function refresh() {\n          this.emit('refresh').emit('resize');\n          return this;\n        }\n        /**\r\n         * Destroy the Splide.\r\n         * \"Completely\" boolean is mainly for breakpoints.\r\n         *\r\n         * @param {boolean} completely - Destroy completely.\r\n         */\n        ;\n\n        _proto.destroy = function destroy(completely) {\n          var _this2 = this;\n\n          if (completely === void 0) {\n            completely = true;\n          } // Postpone destroy because it should be done after mount.\n\n\n          if (this.State.is(CREATED)) {\n            this.on('ready', function () {\n              return _this2.destroy(completely);\n            });\n            return;\n          }\n\n          values(this.Components).reverse().forEach(function (component) {\n            component.destroy && component.destroy(completely);\n          });\n          this.emit('destroy', completely); // Destroy all event handlers, including ones for native events.\n\n          this.Event.destroy();\n          this.State.set(DESTROYED);\n          return this;\n        }\n        /**\r\n         * Return the current slide index.\r\n         *\r\n         * @return {number} - The current slide index.\r\n         // */\n        ;\n\n        _createClass(Splide, [{\n          key: \"index\",\n          get: function get() {\n            return this._i;\n          }\n          /**\r\n           * Set the current slide index.\r\n           *\r\n           * @param {number|string} index - A new index.\r\n           */\n          ,\n          set: function set(index) {\n            this._i = parseInt(index);\n          }\n          /**\r\n           * Return length of slides.\r\n           * This is an alias of Elements.length.\r\n           *\r\n           * @return {number} - A number of slides.\r\n           */\n\n        }, {\n          key: \"length\",\n          get: function get() {\n            return this.Components.Elements.length;\n          }\n          /**\r\n           * Return options.\r\n           *\r\n           * @return {Object} - Options object.\r\n           */\n\n        }, {\n          key: \"options\",\n          get: function get() {\n            return this._o;\n          }\n          /**\r\n           * Set options with merging the given object to the current one.\r\n           *\r\n           * @param {Object} options - New options.\r\n           */\n          ,\n          set: function set(options) {\n            var created = this.State.is(CREATED);\n\n            if (!created) {\n              this.emit('update');\n            }\n\n            this._o = merge(this._o, options);\n\n            if (!created) {\n              this.emit('updated', this._o);\n            }\n          }\n          /**\r\n           * Return the class list.\r\n           * This is an alias of Splide.options.classList.\r\n           *\r\n           * @return {Object} - An object containing all class list.\r\n           */\n\n        }, {\n          key: \"classes\",\n          get: function get() {\n            return this._o.classes;\n          }\n          /**\r\n           * Return the i18n strings.\r\n           * This is an alias of Splide.options.i18n.\r\n           *\r\n           * @return {Object} - An object containing all i18n strings.\r\n           */\n\n        }, {\n          key: \"i18n\",\n          get: function get() {\n            return this._o.i18n;\n          }\n        }]);\n\n        return Splide;\n      }(); // CONCATENATED MODULE: ./src/js/components/options/index.js\n\n      /**\r\n       * The component for initializing options.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The component for initializing options.\r\n       *\r\n       * @param {Splide} Splide - A Splide instance.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n\n      var components_options = function components_options(Splide) {\n        /**\r\n         * Retrieve options from the data attribute.\r\n         * Note that IE10 doesn't support dataset property.\r\n         *\r\n         * @type {string}\r\n         */\n        var options = getAttribute(Splide.root, 'data-splide');\n\n        if (options) {\n          try {\n            Splide.options = JSON.parse(options);\n          } catch (e) {\n            error_error(e.message);\n          }\n        }\n\n        return {\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            if (Splide.State.is(CREATED)) {\n              Splide.index = Splide.options.start;\n            }\n          }\n        };\n      }; // CONCATENATED MODULE: ./src/js/constants/directions.js\n\n      /**\r\n       * Export layout modes.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Enumerate slides from left to right.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var LTR = 'ltr';\n      /**\r\n       * Enumerate slides from right to left.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var RTL = 'rtl';\n      /**\r\n       * Enumerate slides in a col.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var TTB = 'ttb'; // CONCATENATED MODULE: ./src/js/components/elements/slide.js\n\n      /**\r\n       * The sub component for handling each slide.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Events for restoring original styles.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var STYLE_RESTORE_EVENTS = 'update.slide';\n      /**\r\n       * The sub component for handling each slide.\r\n       *\r\n       * @param {Splide}  Splide    - A Splide instance.\r\n       * @param {number}  index     - An unique slide index.\r\n       * @param {number}  realIndex - Clones should pass a real slide index.\r\n       * @param {Element} slide     - A slide element.\r\n       *\r\n       * @return {Object} - The sub component object.\r\n       */\n\n      /* harmony default export */\n\n      var elements_slide = function elements_slide(Splide, index, realIndex, slide) {\n        /**\r\n         * Whether to update \"is-active\" class before or after transition.\r\n         *\r\n         * @type {boolean}\r\n         */\n        var updateOnMove = Splide.options.updateOnMove;\n        /**\r\n         * Events when the slide status is updated.\r\n         * Append a namespace to remove listeners later.\r\n         *\r\n         * @type {string}\r\n         */\n\n        var STATUS_UPDATE_EVENTS = 'ready.slide updated.slide resize.slide moved.slide' + (updateOnMove ? ' move.slide' : '');\n        /**\r\n         * Slide sub component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Slide = {\n          /**\r\n           * Slide element.\r\n           *\r\n           * @type {Element}\r\n           */\n          slide: slide,\n\n          /**\r\n           * Slide index.\r\n           *\r\n           * @type {number}\r\n           */\n          index: index,\n\n          /**\r\n           * Real index for clones.\r\n           *\r\n           * @type {number}\r\n           */\n          realIndex: realIndex,\n\n          /**\r\n           * Container element if available.\r\n           *\r\n           * @type {Element|undefined}\r\n           */\n          container: child(slide, Splide.classes.container),\n\n          /**\r\n           * Whether this is a cloned slide or not.\r\n           *\r\n           * @type {boolean}\r\n           */\n          isClone: realIndex > -1,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            var _this = this;\n\n            if (!this.isClone) {\n              slide.id = Splide.root.id + \"-slide\" + pad(index + 1);\n            }\n\n            Splide.on(STATUS_UPDATE_EVENTS, function () {\n              return _this.update();\n            }).on(STYLE_RESTORE_EVENTS, restoreStyles).on('click', function () {\n              return Splide.emit('click', _this);\n            }, slide);\n            /*\r\n             * Add \"is-active\" class to a clone element temporarily\r\n             * and it will be removed on \"moved\" event.\r\n             */\n\n            if (updateOnMove) {\n              Splide.on('move.slide', function (newIndex) {\n                if (newIndex === realIndex) {\n                  _update(true, false);\n                }\n              });\n            } // Make sure the slide is shown.\n\n\n            applyStyle(slide, {\n              display: ''\n            }); // Hold the original styles.\n\n            this.styles = getAttribute(slide, 'style') || '';\n          },\n\n          /**\r\n           * Destroy.\r\n           */\n          destroy: function destroy() {\n            Splide.off(STATUS_UPDATE_EVENTS).off(STYLE_RESTORE_EVENTS).off('click', slide);\n            removeClass(slide, values(STATUS_CLASSES));\n            restoreStyles();\n            removeAttribute(this.container, 'style');\n          },\n\n          /**\r\n           * Update active and visible status.\r\n           */\n          update: function update() {\n            _update(this.isActive(), false);\n\n            _update(this.isVisible(), true);\n          },\n\n          /**\r\n           * Check whether this slide is active or not.\r\n           *\r\n           * @return {boolean} - True if the slide is active or false if not.\r\n           */\n          isActive: function isActive() {\n            return Splide.index === index;\n          },\n\n          /**\r\n           * Check whether this slide is visible in the viewport or not.\r\n           *\r\n           * @return {boolean} - True if the slide is visible or false if not.\r\n           */\n          isVisible: function isVisible() {\n            var active = this.isActive();\n\n            if (Splide.is(FADE) || active) {\n              return active;\n            }\n\n            var trackRect = getRect(Splide.Components.Elements.track);\n            var slideRect = getRect(slide);\n\n            if (Splide.options.direction === TTB) {\n              return trackRect.top <= slideRect.top && slideRect.bottom <= trackRect.bottom;\n            }\n\n            return trackRect.left <= slideRect.left && slideRect.right <= trackRect.right;\n          },\n\n          /**\r\n           * Calculate how far this slide is from another slide and\r\n           * return true if the distance is within the given number.\r\n           *\r\n           * @param {number} from   - Index of a target slide.\r\n           * @param {number} within - True if the slide is within this number.\r\n           *\r\n           * @return {boolean} - True if the slide is within the number or false otherwise.\r\n           */\n          isWithin: function isWithin(from, within) {\n            var diff = Math.abs(from - index);\n\n            if (!Splide.is(SLIDE) && !this.isClone) {\n              diff = Math.min(diff, Splide.length - diff);\n            }\n\n            return diff < within;\n          }\n        };\n        /**\r\n         * Update classes for activity or visibility.\r\n         *\r\n         * @param {boolean} active        - Is active/visible or not.\r\n         * @param {boolean} forVisibility - Toggle classes for activity or visibility.\r\n         */\n\n        function _update(active, forVisibility) {\n          var type = forVisibility ? 'visible' : 'active';\n          var className = STATUS_CLASSES[type];\n\n          if (active) {\n            addClass(slide, className);\n            Splide.emit(\"\" + type, Slide);\n          } else {\n            if (hasClass(slide, className)) {\n              removeClass(slide, className);\n              Splide.emit(\"\" + (forVisibility ? 'hidden' : 'inactive'), Slide);\n            }\n          }\n        }\n        /**\r\n         * Restore the original styles.\r\n         */\n\n\n        function restoreStyles() {\n          setAttribute(slide, 'style', Slide.styles);\n        }\n\n        return Slide;\n      }; // CONCATENATED MODULE: ./src/js/components/elements/index.js\n\n      /**\r\n       * The component for main elements.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The property name for UID stored in a window object.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var UID_NAME = 'uid';\n      /**\r\n       * The component for main elements.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var components_elements = function components_elements(Splide, Components) {\n        /**\r\n         * Hold the root element.\r\n         *\r\n         * @type {Element}\r\n         */\n        var root = Splide.root;\n        /**\r\n         * Hold the class list.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var classes = Splide.classes;\n        /**\r\n         * Store Slide objects.\r\n         *\r\n         * @type {Array}\r\n         */\n\n        var Slides = [];\n        /*\r\n         * Assign unique ID to the root element if it doesn't have the one.\r\n         * Note that IE doesn't support padStart() to fill the uid by 0.\r\n         */\n\n        if (!root.id) {\n          window.splide = window.splide || {};\n          var uid = window.splide[UID_NAME] || 0;\n          window.splide[UID_NAME] = ++uid;\n          root.id = \"splide\" + pad(uid);\n        }\n        /**\r\n         * Elements component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n\n        var Elements = {\n          /**\r\n           * Called when the component is mounted.\r\n           * Collect main elements and store them as member properties.\r\n           */\n          mount: function mount() {\n            var _this = this;\n\n            this.init();\n            Splide.on('refresh', function () {\n              _this.destroy();\n\n              _this.init();\n            }).on('updated', function () {\n              removeClass(root, getClasses());\n              addClass(root, getClasses());\n            });\n          },\n\n          /**\r\n           * Destroy.\r\n           */\n          destroy: function destroy() {\n            Slides.forEach(function (Slide) {\n              Slide.destroy();\n            });\n            Slides = [];\n            removeClass(root, getClasses());\n          },\n\n          /**\r\n           * Initialization.\r\n           */\n          init: function init() {\n            var _this2 = this;\n\n            collect();\n            addClass(root, getClasses());\n            this.slides.forEach(function (slide, index) {\n              _this2.register(slide, index, -1);\n            });\n          },\n\n          /**\r\n           * Register a slide to create a Slide object and handle its behavior.\r\n           *\r\n           * @param {Element} slide     - A slide element.\r\n           * @param {number}  index     - A unique index. This can be negative.\r\n           * @param {number}  realIndex - A real index for clones. Set -1 for real slides.\r\n           */\n          register: function register(slide, index, realIndex) {\n            var SlideObject = elements_slide(Splide, index, realIndex, slide);\n            SlideObject.mount();\n            Slides.push(SlideObject);\n          },\n\n          /**\r\n           * Return the Slide object designated by the index.\r\n           * Note that \"find\" is not supported by IE.\r\n           *\r\n           * @return {Object|undefined} - A Slide object if available. Undefined if not.\r\n           */\n          getSlide: function getSlide(index) {\n            return Slides.filter(function (Slide) {\n              return Slide.index === index;\n            })[0];\n          },\n\n          /**\r\n           * Return all Slide objects.\r\n           *\r\n           * @param {boolean} includeClones - Whether to include cloned slides or not.\r\n           *\r\n           * @return {Object[]} - Slide objects.\r\n           */\n          getSlides: function getSlides(includeClones) {\n            return includeClones ? Slides : Slides.filter(function (Slide) {\n              return !Slide.isClone;\n            });\n          },\n\n          /**\r\n           * Return Slide objects belonging to the given page.\r\n           *\r\n           * @param {number} page - A page number.\r\n           *\r\n           * @return {Object[]} - An array containing Slide objects.\r\n           */\n          getSlidesByPage: function getSlidesByPage(page) {\n            var idx = Components.Controller.toIndex(page);\n            var options = Splide.options;\n            var max = options.focus !== false ? 1 : options.perPage;\n            return Slides.filter(function (_ref) {\n              var index = _ref.index;\n              return idx <= index && index < idx + max;\n            });\n          },\n\n          /**\r\n           * Insert a slide to a slider.\r\n           * Need to refresh Splide after adding a slide.\r\n           *\r\n           * @param {Node|string} slide    - A slide element to be added.\r\n           * @param {number}      index    - A slide will be added at the position.\r\n           * @param {Function}    callback - Called right after the slide is added to the DOM tree.\r\n           */\n          add: function add(slide, index, callback) {\n            if (typeof slide === 'string') {\n              slide = domify(slide);\n            }\n\n            if (slide instanceof Element) {\n              var ref = this.slides[index]; // This will be removed in mount() of a Slide component.\n\n              applyStyle(slide, {\n                display: 'none'\n              });\n\n              if (ref) {\n                before(slide, ref);\n                this.slides.splice(index, 0, slide);\n              } else {\n                append(this.list, slide);\n                this.slides.push(slide);\n              }\n\n              dom_loaded(slide, function () {\n                callback && callback(slide);\n              });\n            }\n          },\n\n          /**\r\n           * Remove a slide from a slider.\r\n           * Need to refresh Splide after removing a slide.\r\n           *\r\n           * @param index - Slide index.\r\n           */\n          remove: function remove(index) {\n            dom_remove(this.slides.splice(index, 1)[0]);\n          },\n\n          /**\r\n           * Trigger the provided callback for each Slide object.\r\n           *\r\n           * @param {Function} callback - A callback function. The first argument will be the Slide object.\r\n           */\n          each: function each(callback) {\n            Slides.forEach(callback);\n          },\n\n          /**\r\n           * Return slides length without clones.\r\n           *\r\n           * @return {number} - Slide length.\r\n           */\n          get length() {\n            return this.slides.length;\n          },\n\n          /**\r\n           * Return \"SlideObjects\" length including clones.\r\n           *\r\n           * @return {number} - Slide length including clones.\r\n           */\n          get total() {\n            return Slides.length;\n          }\n\n        };\n        /**\r\n         * Collect elements.\r\n         */\n\n        function collect() {\n          Elements.slider = child(root, classes.slider);\n          Elements.track = find(root, \".\" + classes.track);\n          Elements.list = child(Elements.track, classes.list);\n          exist(Elements.track && Elements.list, 'Track or list was not found.');\n          Elements.slides = children(Elements.list, classes.slide);\n          var arrows = findParts(classes.arrows);\n          Elements.arrows = {\n            prev: find(arrows, \".\" + classes.prev),\n            next: find(arrows, \".\" + classes.next)\n          };\n          var autoplay = findParts(classes.autoplay);\n          Elements.bar = find(findParts(classes.progress), \".\" + classes.bar);\n          Elements.play = find(autoplay, \".\" + classes.play);\n          Elements.pause = find(autoplay, \".\" + classes.pause);\n          Elements.track.id = Elements.track.id || root.id + \"-track\";\n          Elements.list.id = Elements.list.id || root.id + \"-list\";\n        }\n        /**\r\n         * Return class names for the root element.\r\n         */\n\n\n        function getClasses() {\n          var rootClass = classes.root;\n          var options = Splide.options;\n          return [rootClass + \"--\" + options.type, rootClass + \"--\" + options.direction, options.drag ? rootClass + \"--draggable\" : '', options.isNavigation ? rootClass + \"--nav\" : '', STATUS_CLASSES.active];\n        }\n        /**\r\n         * Find parts only from children of the root or track.\r\n         *\r\n         * @return {Element} - A found element or undefined.\r\n         */\n\n\n        function findParts(className) {\n          return child(root, className) || child(Elements.slider, className);\n        }\n\n        return Elements;\n      }; // CONCATENATED MODULE: ./src/js/components/controller/index.js\n\n      /**\r\n       * The component for controlling the track.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n\n      var floor = Math.floor;\n      /**\r\n       * The component for controlling the track.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var controller = function controller(Splide, Components) {\n        /**\r\n         * Store current options.\r\n         *\r\n         * @type {Object}\r\n         */\n        var options;\n        /**\r\n         * True if the slide is LOOP mode.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var isLoop;\n        /**\r\n         * Controller component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Controller = {\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            options = Splide.options;\n            isLoop = Splide.is(LOOP);\n            bind();\n          },\n\n          /**\r\n           * Make track run by the given control.\r\n           * - \"+{i}\" : Increment the slide index by i.\r\n           * - \"-{i}\" : Decrement the slide index by i.\r\n           * - \"{i}\"  : Go to the slide whose index is i.\r\n           * - \">\"    : Go to next page.\r\n           * - \"<\"    : Go to prev page.\r\n           * - \">{i}\" : Go to page i.\r\n           *\r\n           * @param {string|number} control  - A control pattern.\r\n           * @param {boolean}       silently - Go to the destination without event emission.\r\n           */\n          go: function go(control, silently) {\n            var destIndex = this.trim(this.parse(control));\n            Components.Track.go(destIndex, this.rewind(destIndex), silently);\n          },\n\n          /**\r\n           * Parse the given control and return the destination index for the track.\r\n           *\r\n           * @param {string} control - A control target pattern.\r\n           *\r\n           * @return {number} - A parsed target.\r\n           */\n          parse: function parse(control) {\n            var index = Splide.index;\n            var matches = String(control).match(/([+\\-<>]+)(\\d+)?/);\n            var indicator = matches ? matches[1] : '';\n            var number = matches ? parseInt(matches[2]) : 0;\n\n            switch (indicator) {\n              case '+':\n                index += number || 1;\n                break;\n\n              case '-':\n                index -= number || 1;\n                break;\n\n              case '>':\n              case '<':\n                index = parsePage(number, index, indicator === '<');\n                break;\n\n              default:\n                index = parseInt(control);\n            }\n\n            return index;\n          },\n\n          /**\r\n           * Compute index from the given page number.\r\n           *\r\n           * @param {number} page - Page number.\r\n           *\r\n           * @return {number} - A computed page number.\r\n           */\n          toIndex: function toIndex(page) {\n            if (hasFocus()) {\n              return page;\n            }\n\n            var length = Splide.length;\n            var perPage = options.perPage;\n            var index = page * perPage;\n            index = index - (this.pageLength * perPage - length) * floor(index / length); // Adjustment for the last page.\n\n            if (length - perPage <= index && index < length) {\n              index = length - perPage;\n            }\n\n            return index;\n          },\n\n          /**\r\n           * Compute page number from the given slide index.\r\n           *\r\n           * @param {number} index - Slide index.\r\n           *\r\n           * @return {number} - A computed page number.\r\n           */\n          toPage: function toPage(index) {\n            if (hasFocus()) {\n              return index;\n            }\n\n            var length = Splide.length;\n            var perPage = options.perPage; // Make the last \"perPage\" number of slides belong to the last page.\n\n            if (length - perPage <= index && index < length) {\n              return floor((length - 1) / perPage);\n            }\n\n            return floor(index / perPage);\n          },\n\n          /**\r\n           * Trim the given index according to the current mode.\r\n           * Index being returned could be less than 0 or greater than the length in Loop mode.\r\n           *\r\n           * @param {number} index - An index being trimmed.\r\n           *\r\n           * @return {number} - A trimmed index.\r\n           */\n          trim: function trim(index) {\n            if (!isLoop) {\n              index = options.rewind ? this.rewind(index) : between(index, 0, this.edgeIndex);\n            }\n\n            return index;\n          },\n\n          /**\r\n           * Rewind the given index if it's out of range.\r\n           *\r\n           * @param {number} index - An index.\r\n           *\r\n           * @return {number} - A rewound index.\r\n           */\n          rewind: function rewind(index) {\n            var edge = this.edgeIndex;\n\n            if (isLoop) {\n              while (index > edge) {\n                index -= edge + 1;\n              }\n\n              while (index < 0) {\n                index += edge + 1;\n              }\n            } else {\n              if (index > edge) {\n                index = 0;\n              } else if (index < 0) {\n                index = edge;\n              }\n            }\n\n            return index;\n          },\n\n          /**\r\n           * Check if the direction is \"rtl\" or not.\r\n           *\r\n           * @return {boolean} - True if \"rtl\" or false if not.\r\n           */\n          isRtl: function isRtl() {\n            return options.direction === RTL;\n          },\n\n          /**\r\n           * Return the page length.\r\n           *\r\n           * @return {number} - Max page number.\r\n           */\n          get pageLength() {\n            var length = Splide.length;\n            return hasFocus() ? length : Math.ceil(length / options.perPage);\n          },\n\n          /**\r\n           * Return the edge index.\r\n           *\r\n           * @return {number} - Edge index.\r\n           */\n          get edgeIndex() {\n            var length = Splide.length;\n\n            if (!length) {\n              return 0;\n            }\n\n            if (hasFocus() || options.isNavigation || isLoop) {\n              return length - 1;\n            }\n\n            return length - options.perPage;\n          },\n\n          /**\r\n           * Return the index of the previous slide.\r\n           *\r\n           * @return {number} - The index of the previous slide if available. -1 otherwise.\r\n           */\n          get prevIndex() {\n            var prev = Splide.index - 1;\n\n            if (isLoop || options.rewind) {\n              prev = this.rewind(prev);\n            }\n\n            return prev > -1 ? prev : -1;\n          },\n\n          /**\r\n           * Return the index of the next slide.\r\n           *\r\n           * @return {number} - The index of the next slide if available. -1 otherwise.\r\n           */\n          get nextIndex() {\n            var next = Splide.index + 1;\n\n            if (isLoop || options.rewind) {\n              next = this.rewind(next);\n            }\n\n            return Splide.index < next && next <= this.edgeIndex || next === 0 ? next : -1;\n          }\n\n        };\n        /**\r\n         * Listen to some events.\r\n         */\n\n        function bind() {\n          Splide.on('move', function (newIndex) {\n            Splide.index = newIndex;\n          }).on('updated refresh', function (newOptions) {\n            options = newOptions || options;\n            Splide.index = between(Splide.index, 0, Controller.edgeIndex);\n          });\n        }\n        /**\r\n         * Verify if the focus option is available or not.\r\n         *\r\n         * @return {boolean} - True if a slider has the focus option.\r\n         */\n\n\n        function hasFocus() {\n          return options.focus !== false;\n        }\n        /**\r\n         * Return the next or previous page index computed by the page number and current index.\r\n         *\r\n         * @param {number}  number - Specify the page number.\r\n         * @param {number}  index  - Current index.\r\n         * @param {boolean} prev   - Prev or next.\r\n         *\r\n         * @return {number} - Slide index.\r\n         */\n\n\n        function parsePage(number, index, prev) {\n          if (number > -1) {\n            return Controller.toIndex(number);\n          }\n\n          var perMove = options.perMove;\n          var sign = prev ? -1 : 1;\n\n          if (perMove) {\n            return index + perMove * sign;\n          }\n\n          return Controller.toIndex(Controller.toPage(index) + sign);\n        }\n\n        return Controller;\n      }; // CONCATENATED MODULE: ./src/js/components/track/index.js\n\n      /**\r\n       * The component for moving list in the track.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n\n      var abs = Math.abs;\n      /**\r\n       * The component for moving list in the track.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var components_track = function components_track(Splide, Components) {\n        /**\r\n         * Hold the Layout component.\r\n         *\r\n         * @type {Object}\r\n         */\n        var Layout;\n        /**\r\n         * Hold the Layout component.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Elements;\n        /**\r\n         * Store the list element.\r\n         *\r\n         * @type {Element}\r\n         */\n\n        var list;\n        /**\r\n         * Whether the current direction is vertical or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var isVertical = Splide.options.direction === TTB;\n        /**\r\n         * Whether the slider type is FADE or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var isFade = Splide.is(FADE);\n        /**\r\n         * Whether the slider direction is RTL or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var isRTL = Splide.options.direction === RTL;\n        /**\r\n         * This will be true while transitioning from the last index to the first one.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var isLoopPending = false;\n        /**\r\n         * Sign for the direction. Only RTL mode uses the positive sign.\r\n         *\r\n         * @type {number}\r\n         */\n\n        var sign = isRTL ? 1 : -1;\n        /**\r\n         * Track component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Track = {\n          /**\r\n           * Make public the sign defined locally.\r\n           *\r\n           * @type {number}\r\n           */\n          sign: sign,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            Elements = Components.Elements;\n            Layout = Components.Layout;\n            list = Elements.list;\n          },\n\n          /**\r\n           * Called after the component is mounted.\r\n           * The resize event must be registered after the Layout's one is done.\r\n           */\n          mounted: function mounted() {\n            var _this = this;\n\n            if (!isFade) {\n              this.jump(0);\n              Splide.on('mounted resize updated', function () {\n                _this.jump(Splide.index);\n              });\n            }\n          },\n\n          /**\r\n           * Go to the given destination index.\r\n           * After arriving there, the track is jump to the new index without animation, mainly for loop mode.\r\n           *\r\n           * @param {number}  destIndex - A destination index.\r\n           *                              This can be negative or greater than slides length for reaching clones.\r\n           * @param {number}  newIndex  - An actual new index. They are always same in Slide and Rewind mode.\r\n           * @param {boolean} silently  - If true, suppress emitting events.\r\n           */\n          go: function go(destIndex, newIndex, silently) {\n            var newPosition = getTrimmedPosition(destIndex);\n            var prevIndex = Splide.index; // Prevent any actions while transitioning from the last index to the first one for jump.\n\n            if (Splide.State.is(MOVING) && isLoopPending) {\n              return;\n            }\n\n            isLoopPending = destIndex !== newIndex;\n\n            if (!silently) {\n              Splide.emit('move', newIndex, prevIndex, destIndex);\n            }\n\n            if (Math.abs(newPosition - this.position) >= 1 || isFade) {\n              Components.Transition.start(destIndex, newIndex, prevIndex, this.toCoord(newPosition), function () {\n                onTransitionEnd(destIndex, newIndex, prevIndex, silently);\n              });\n            } else {\n              if (destIndex !== prevIndex && Splide.options.trimSpace === 'move') {\n                Components.Controller.go(destIndex + destIndex - prevIndex, silently);\n              } else {\n                onTransitionEnd(destIndex, newIndex, prevIndex, silently);\n              }\n            }\n          },\n\n          /**\r\n           * Move the track to the specified index.\r\n           *\r\n           * @param {number} index - A destination index where the track jumps.\r\n           */\n          jump: function jump(index) {\n            this.translate(getTrimmedPosition(index));\n          },\n\n          /**\r\n           * Set the list position by CSS translate property.\r\n           *\r\n           * @param {number} position - A new position value.\r\n           */\n          translate: function translate(position) {\n            applyStyle(list, {\n              transform: \"translate\" + (isVertical ? 'Y' : 'X') + \"(\" + position + \"px)\"\n            });\n          },\n\n          /**\r\n           * Cancel the transition and set the list position.\r\n           * Also, loop the slider if necessary.\r\n           */\n          cancel: function cancel() {\n            if (Splide.is(LOOP)) {\n              this.shift();\n            } else {\n              // Ensure the current position.\n              this.translate(this.position);\n            }\n\n            applyStyle(list, {\n              transition: ''\n            });\n          },\n\n          /**\r\n           * Shift the slider if it exceeds borders on the edge.\r\n           */\n          shift: function shift() {\n            var position = abs(this.position);\n            var left = abs(this.toPosition(0));\n            var right = abs(this.toPosition(Splide.length));\n            var innerSize = right - left;\n\n            if (position < left) {\n              position += innerSize;\n            } else if (position > right) {\n              position -= innerSize;\n            }\n\n            this.translate(sign * position);\n          },\n\n          /**\r\n           * Trim redundant spaces on the left or right edge if necessary.\r\n           *\r\n           * @param {number} position - Position value to be trimmed.\r\n           *\r\n           * @return {number} - Trimmed position.\r\n           */\n          trim: function trim(position) {\n            if (!Splide.options.trimSpace || Splide.is(LOOP)) {\n              return position;\n            }\n\n            var edge = sign * (Layout.totalSize() - Layout.size - Layout.gap);\n            return between(position, edge, 0);\n          },\n\n          /**\r\n           * Calculate the closest slide index from the given position.\r\n           *\r\n           * @param {number} position - A position converted to an slide index.\r\n           *\r\n           * @return {number} - The closest slide index.\r\n           */\n          toIndex: function toIndex(position) {\n            var _this2 = this;\n\n            var index = 0;\n            var minDistance = Infinity;\n            Elements.getSlides(true).forEach(function (Slide) {\n              var slideIndex = Slide.index;\n              var distance = abs(_this2.toPosition(slideIndex) - position);\n\n              if (distance < minDistance) {\n                minDistance = distance;\n                index = slideIndex;\n              }\n            });\n            return index;\n          },\n\n          /**\r\n           * Return coordinates object by the given position.\r\n           *\r\n           * @param {number} position - A position value.\r\n           *\r\n           * @return {Object} - A coordinates object.\r\n           */\n          toCoord: function toCoord(position) {\n            return {\n              x: isVertical ? 0 : position,\n              y: isVertical ? position : 0\n            };\n          },\n\n          /**\r\n           * Calculate the track position by a slide index.\r\n           *\r\n           * @param {number} index - Slide index.\r\n           *\r\n           * @return {Object} - Calculated position.\r\n           */\n          toPosition: function toPosition(index) {\n            var position = Layout.totalSize(index) - Layout.slideSize(index) - Layout.gap;\n            return sign * (position + this.offset(index));\n          },\n\n          /**\r\n           * Return the current offset value, considering direction.\r\n           *\r\n           * @return {number} - Offset amount.\r\n           */\n          offset: function offset(index) {\n            var focus = Splide.options.focus;\n            var slideSize = Layout.slideSize(index);\n\n            if (focus === 'center') {\n              return -(Layout.size - slideSize) / 2;\n            }\n\n            return -(parseInt(focus) || 0) * (slideSize + Layout.gap);\n          },\n\n          /**\r\n           * Return the current position.\r\n           * This returns the correct position even while transitioning by CSS.\r\n           *\r\n           * @return {number} - Current position.\r\n           */\n          get position() {\n            var prop = isVertical ? 'top' : isRTL ? 'right' : 'left';\n            return getRect(list)[prop] - (getRect(Elements.track)[prop] - Layout.padding[prop] * sign);\n          }\n\n        };\n        /**\r\n         * Called whenever slides arrive at a destination.\r\n         *\r\n         * @param {number}  destIndex - A destination index.\r\n         * @param {number}  newIndex  - A new index.\r\n         * @param {number}  prevIndex - A previous index.\r\n         * @param {boolean} silently  - If true, suppress emitting events.\r\n         */\n\n        function onTransitionEnd(destIndex, newIndex, prevIndex, silently) {\n          applyStyle(list, {\n            transition: ''\n          });\n          isLoopPending = false;\n\n          if (!isFade) {\n            Track.jump(newIndex);\n          }\n\n          if (!silently) {\n            Splide.emit('moved', newIndex, prevIndex, destIndex);\n          }\n        }\n        /**\r\n         * Convert index to the trimmed position.\r\n         *\r\n         * @return {number} - Trimmed position.\r\n         */\n\n\n        function getTrimmedPosition(index) {\n          return Track.trim(Track.toPosition(index));\n        }\n\n        return Track;\n      }; // CONCATENATED MODULE: ./src/js/components/clones/index.js\n\n      /**\r\n       * The component for cloning some slides for \"loop\" mode of the track.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The component for cloning some slides for \"loop\" mode of the track.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n\n      var components_clones = function components_clones(Splide, Components) {\n        /**\r\n         * Store information of all clones.\r\n         *\r\n         * @type {Array}\r\n         */\n        var clones = [];\n        /**\r\n         * Store the current clone count on one side.\r\n         *\r\n         * @type {number}\r\n         */\n\n        var cloneCount = 0;\n        /**\r\n         * Keep Elements component.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Elements = Components.Elements;\n        /**\r\n         * Clones component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Clones = {\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            var _this = this;\n\n            if (Splide.is(LOOP)) {\n              init();\n              Splide.on('refresh', init).on('resize', function () {\n                if (cloneCount !== getCloneCount()) {\n                  // Destroy before refresh not to collect clones by the Elements component.\n                  _this.destroy();\n\n                  Splide.refresh();\n                }\n              });\n            }\n          },\n\n          /**\r\n           * Destroy.\r\n           */\n          destroy: function destroy() {\n            dom_remove(clones);\n            clones = [];\n          },\n\n          /**\r\n           * Return all clones.\r\n           *\r\n           * @return {Element[]} - Cloned elements.\r\n           */\n          get clones() {\n            return clones;\n          },\n\n          /**\r\n           * Return clone length.\r\n           *\r\n           * @return {number} - A length of clones.\r\n           */\n          get length() {\n            return clones.length;\n          }\n\n        };\n        /**\r\n         * Initialization.\r\n         */\n\n        function init() {\n          Clones.destroy();\n          cloneCount = getCloneCount();\n          generateClones(cloneCount);\n        }\n        /**\r\n         * Generate and append/prepend clones.\r\n         *\r\n         * @param {number} count - The half number of clones.\r\n         */\n\n\n        function generateClones(count) {\n          var length = Elements.length,\n              register = Elements.register;\n\n          if (length) {\n            var slides = Elements.slides;\n\n            while (slides.length < count) {\n              slides = slides.concat(slides);\n            } // Clones after the last element.\n\n\n            slides.slice(0, count).forEach(function (elm, index) {\n              var clone = cloneDeeply(elm);\n              append(Elements.list, clone);\n              clones.push(clone);\n              register(clone, index + length, index % length);\n            }); // Clones before the first element.\n\n            slides.slice(-count).forEach(function (elm, index) {\n              var clone = cloneDeeply(elm);\n              before(clone, slides[0]);\n              clones.push(clone);\n              register(clone, index - count, (length + index - count % length) % length);\n            });\n          }\n        }\n        /**\r\n         * Return half count of clones to be generated.\r\n         * Clone count is determined by:\r\n         * - \"clones\" value in the options.\r\n         * - Number of slides that can be placed in a view in \"fixed\" mode.\r\n         * - Max pages a flick action can move.\r\n         * - Whether the slide length is enough for perPage.\r\n         *\r\n         * @return {number} - Count for clones.\r\n         */\n\n\n        function getCloneCount() {\n          var options = Splide.options;\n\n          if (options.clones) {\n            return options.clones;\n          } // Use the slide length in autoWidth mode because the number cannot be calculated.\n\n\n          var baseCount = options.autoWidth || options.autoHeight ? Elements.length : options.perPage;\n          var dimension = options.direction === TTB ? 'Height' : 'Width';\n          var fixedSize = toPixel(Splide.root, options[\"fixed\" + dimension]);\n\n          if (fixedSize) {\n            // Roughly calculate the count. This needs not to be strict.\n            baseCount = Math.ceil(Elements.track[\"client\" + dimension] / fixedSize);\n          }\n\n          return baseCount * (options.drag ? options.flickMaxPages + 1 : 1);\n        }\n        /**\r\n         * Clone deeply the given element.\r\n         *\r\n         * @param {Element} elm - An element being duplicated.\r\n         *\r\n         * @return {Node} - A cloned node(element).\r\n         */\n\n\n        function cloneDeeply(elm) {\n          var clone = elm.cloneNode(true);\n          addClass(clone, Splide.classes.clone); // ID should not be duplicated.\n\n          removeAttribute(clone, 'id');\n          return clone;\n        }\n\n        return Clones;\n      }; // CONCATENATED MODULE: ./src/js/components/layout/directions/horizontal.js\n\n      /**\r\n       * The resolver component for horizontal layout.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The resolver component for horizontal layout.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The resolver object.\r\n       */\n\n      /* harmony default export */\n\n\n      var horizontal = function horizontal(Splide, Components) {\n        /**\r\n         * Keep the Elements component.\r\n         *\r\n         * @type {string}\r\n         */\n        var Elements = Components.Elements;\n        /**\r\n         * Keep the root element.\r\n         *\r\n         * @type {Element}\r\n         */\n\n        var root = Splide.root;\n        /**\r\n         * Keep the track element.\r\n         *\r\n         * @type {Element}\r\n         */\n\n        var track;\n        /**\r\n         * Keep the latest options.\r\n         *\r\n         * @type {Element}\r\n         */\n\n        var options = Splide.options;\n        return {\n          /**\r\n           * Margin property name.\r\n           *\r\n           * @type {string}\r\n           */\n          margin: 'margin' + (options.direction === RTL ? 'Left' : 'Right'),\n\n          /**\r\n           * Always 0 because the height will be determined by inner contents.\r\n           *\r\n           * @type {number}\r\n           */\n          height: 0,\n\n          /**\r\n           * Initialization.\r\n           */\n          init: function init() {\n            this.resize();\n          },\n\n          /**\r\n           * Resize gap and padding.\r\n           * This must be called on init.\r\n           */\n          resize: function resize() {\n            options = Splide.options;\n            track = Elements.track;\n            this.gap = toPixel(root, options.gap);\n            var padding = options.padding;\n            var left = toPixel(root, padding.left || padding);\n            var right = toPixel(root, padding.right || padding);\n            this.padding = {\n              left: left,\n              right: right\n            };\n            applyStyle(track, {\n              paddingLeft: unit(left),\n              paddingRight: unit(right)\n            });\n          },\n\n          /**\r\n           * Return total width from the left of the list to the right of the slide specified by the provided index.\r\n           *\r\n           * @param {number} index - Optional. A slide index. If undefined, total width of the slider will be returned.\r\n           *\r\n           * @return {number} - Total width to the right side of the specified slide, or 0 for an invalid index.\r\n           */\n          totalWidth: function totalWidth(index) {\n            if (index === void 0) {\n              index = Splide.length - 1;\n            }\n\n            var Slide = Elements.getSlide(index);\n            var width = 0;\n\n            if (Slide) {\n              var slideRect = getRect(Slide.slide);\n              var listRect = getRect(Elements.list);\n\n              if (options.direction === RTL) {\n                width = listRect.right - slideRect.left;\n              } else {\n                width = slideRect.right - listRect.left;\n              }\n\n              width += this.gap;\n            }\n\n            return width;\n          },\n\n          /**\r\n           * Return the slide width in px.\r\n           *\r\n           * @param {number} index - Slide index.\r\n           *\r\n           * @return {number} - The slide width.\r\n           */\n          slideWidth: function slideWidth(index) {\n            if (options.autoWidth) {\n              var Slide = Elements.getSlide(index);\n              return Slide ? Slide.slide.offsetWidth : 0;\n            }\n\n            var width = options.fixedWidth || (this.width + this.gap) / options.perPage - this.gap;\n            return toPixel(root, width);\n          },\n\n          /**\r\n           * Return the slide height in px.\r\n           *\r\n           * @return {number} - The slide height.\r\n           */\n          slideHeight: function slideHeight() {\n            var height = options.height || options.fixedHeight || this.width * options.heightRatio;\n            return toPixel(root, height);\n          },\n\n          /**\r\n           * Return slider width without padding.\r\n           *\r\n           * @return {number} - Current slider width.\r\n           */\n          get width() {\n            return track.clientWidth - this.padding.left - this.padding.right;\n          }\n\n        };\n      }; // CONCATENATED MODULE: ./src/js/components/layout/directions/vertical.js\n\n      /**\r\n       * The resolver component for vertical layout.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The resolver component for vertical layout.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The resolver object.\r\n       */\n\n      /* harmony default export */\n\n\n      var vertical = function vertical(Splide, Components) {\n        /**\r\n         * Keep the Elements component.\r\n         *\r\n         * @type {string}\r\n         */\n        var Elements = Components.Elements;\n        /**\r\n         * Keep the root element.\r\n         *\r\n         * @type {Element}\r\n         */\n\n        var root = Splide.root;\n        /**\r\n         * Keep the track element.\r\n         *\r\n         * @type {Element}\r\n         */\n\n        var track;\n        /**\r\n         * Keep the latest options.\r\n         *\r\n         * @type {Element}\r\n         */\n\n        var options;\n        return {\n          /**\r\n           * Margin property name.\r\n           *\r\n           * @type {string}\r\n           */\n          margin: 'marginBottom',\n\n          /**\r\n           * Initialization.\r\n           */\n          init: function init() {\n            this.resize();\n          },\n\n          /**\r\n           * Resize gap and padding.\r\n           * This must be called on init.\r\n           */\n          resize: function resize() {\n            options = Splide.options;\n            track = Elements.track;\n            this.gap = toPixel(root, options.gap);\n            var padding = options.padding;\n            var top = toPixel(root, padding.top || padding);\n            var bottom = toPixel(root, padding.bottom || padding);\n            this.padding = {\n              top: top,\n              bottom: bottom\n            };\n            applyStyle(track, {\n              paddingTop: unit(top),\n              paddingBottom: unit(bottom)\n            });\n          },\n\n          /**\r\n           * Return total height from the top of the list to the bottom of the slide specified by the provided index.\r\n           *\r\n           * @param {number} index - Optional. A slide index. If undefined, total height of the slider will be returned.\r\n           *\r\n           * @return {number} - Total height to the bottom of the specified slide, or 0 for an invalid index.\r\n           */\n          totalHeight: function totalHeight(index) {\n            if (index === void 0) {\n              index = Splide.length - 1;\n            }\n\n            var Slide = Elements.getSlide(index);\n\n            if (Slide) {\n              return getRect(Slide.slide).bottom - getRect(Elements.list).top + this.gap;\n            }\n\n            return 0;\n          },\n\n          /**\r\n           * Return the slide width in px.\r\n           *\r\n           * @return {number} - The slide width.\r\n           */\n          slideWidth: function slideWidth() {\n            return toPixel(root, options.fixedWidth || this.width);\n          },\n\n          /**\r\n           * Return the slide height in px.\r\n           *\r\n           * @param {number} index - Slide index.\r\n           *\r\n           * @return {number} - The slide height.\r\n           */\n          slideHeight: function slideHeight(index) {\n            if (options.autoHeight) {\n              var Slide = Elements.getSlide(index);\n              return Slide ? Slide.slide.offsetHeight : 0;\n            }\n\n            var height = options.fixedHeight || (this.height + this.gap) / options.perPage - this.gap;\n            return toPixel(root, height);\n          },\n\n          /**\r\n           * Return slider width without padding.\r\n           *\r\n           * @return {number} - Current slider width.\r\n           */\n          get width() {\n            return track.clientWidth;\n          },\n\n          /**\r\n           * Return slide height without padding.\r\n           *\r\n           * @return {number} - Slider height.\r\n           */\n          get height() {\n            var height = options.height || this.width * options.heightRatio;\n            exist(height, '\"height\" or \"heightRatio\" is missing.');\n            return toPixel(root, height) - this.padding.top - this.padding.bottom;\n          }\n\n        };\n      }; // CONCATENATED MODULE: ./src/js/utils/time.js\n\n      /**\r\n       * A package of utility functions related with time.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Simple throttle function that controls how often the given function is executed.\r\n       *\r\n       * @param {function} func - A function to be throttled.\r\n       * @param {number}   wait - Time in millisecond for interval of execution.\r\n       *\r\n       * @return {Function} - A debounced function.\r\n       */\n\n\n      function throttle(func, wait) {\n        var timeout; // Declare function by the \"function\" keyword to prevent \"this\" from being inherited.\n\n        return function () {\n          if (!timeout) {\n            timeout = setTimeout(function () {\n              func();\n              timeout = null;\n            }, wait);\n          }\n        };\n      }\n      /**\r\n       * Custom setInterval function that provides progress rate as callback.\r\n       *\r\n       * @param {function} callback - A callback function fired every time the interval time passes.\r\n       * @param {number}   interval - Interval duration in milliseconds.\r\n       * @param {function} progress - A callback function fired whenever the progress goes.\r\n       *\r\n       * @return {Object} - An object containing play() and pause() functions.\r\n       */\n\n\n      function createInterval(callback, interval, progress) {\n        var _window = window,\n            requestAnimationFrame = _window.requestAnimationFrame;\n        var start,\n            elapse,\n            rate,\n            _pause = true;\n\n        var step = function step(timestamp) {\n          if (!_pause) {\n            if (!start) {\n              start = timestamp;\n\n              if (rate && rate < 1) {\n                start -= rate * interval;\n              }\n            }\n\n            elapse = timestamp - start;\n            rate = elapse / interval;\n\n            if (elapse >= interval) {\n              start = 0;\n              rate = 1;\n              callback();\n            }\n\n            if (progress) {\n              progress(rate);\n            }\n\n            requestAnimationFrame(step);\n          }\n        };\n\n        return {\n          pause: function pause() {\n            _pause = true;\n            start = 0;\n          },\n          play: function play(reset) {\n            start = 0;\n\n            if (_pause) {\n              _pause = false;\n\n              if (reset) {\n                rate = 0;\n              }\n\n              requestAnimationFrame(step);\n            }\n          }\n        };\n      } // CONCATENATED MODULE: ./src/js/components/layout/index.js\n\n      /**\r\n       * The component for handing slide layouts and their sizes.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The component for handing slide layouts and their sizes.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n\n      var layout = function layout(Splide, Components) {\n        /**\r\n         * Keep the Elements component.\r\n         *\r\n         * @type {string}\r\n         */\n        var Elements = Components.Elements;\n        /**\r\n         * Whether the slider is vertical or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var isVertical = Splide.options.direction === TTB;\n        /**\r\n         * Layout component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Layout = object_assign({\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            bind();\n            init(); // The word \"size\" means width for a horizontal slider and height for a vertical slider.\n\n            this.totalSize = isVertical ? this.totalHeight : this.totalWidth;\n            this.slideSize = isVertical ? this.slideHeight : this.slideWidth;\n          },\n\n          /**\r\n           * Destroy the component.\r\n           */\n          destroy: function destroy() {\n            removeAttribute([Elements.list, Elements.track], 'style');\n          },\n\n          /**\r\n           * Return the slider height on the vertical mode or width on the horizontal mode.\r\n           *\r\n           * @return {number}\r\n           */\n          get size() {\n            return isVertical ? this.height : this.width;\n          }\n\n        }, isVertical ? vertical(Splide, Components) : horizontal(Splide, Components));\n        /**\r\n         * Init slider styles according to options.\r\n         */\n\n        function init() {\n          Layout.init();\n          applyStyle(Splide.root, {\n            maxWidth: unit(Splide.options.width)\n          });\n          Elements.each(function (Slide) {\n            Slide.slide.style[Layout.margin] = unit(Layout.gap);\n          });\n          resize();\n        }\n        /**\r\n         * Listen the resize native event with throttle.\r\n         * Initialize when the component is mounted or options are updated.\r\n         */\n\n\n        function bind() {\n          Splide.on('resize load', throttle(function () {\n            Splide.emit('resize');\n          }, Splide.options.throttle), window).on('resize', resize).on('updated refresh', init);\n        }\n        /**\r\n         * Resize the track and slide elements.\r\n         */\n\n\n        function resize() {\n          var options = Splide.options;\n          Layout.resize();\n          applyStyle(Elements.track, {\n            height: unit(Layout.height)\n          });\n          var slideHeight = options.autoHeight ? null : unit(Layout.slideHeight());\n          Elements.each(function (Slide) {\n            applyStyle(Slide.container, {\n              height: slideHeight\n            });\n            applyStyle(Slide.slide, {\n              width: options.autoWidth ? null : unit(Layout.slideWidth(Slide.index)),\n              height: Slide.container ? null : slideHeight\n            });\n          });\n        }\n\n        return Layout;\n      }; // CONCATENATED MODULE: ./src/js/components/drag/index.js\n\n      /**\r\n       * The component for supporting mouse drag and swipe.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n\n      var drag_abs = Math.abs;\n      /**\r\n       * If the absolute velocity is greater thant this value,\r\n       * a slider always goes to a different slide after drag, not allowed to stay on a current slide.\r\n       */\n\n      var MIN_VELOCITY = 0.1;\n      /**\r\n       * Adjust how much the track can be pulled on the first or last page.\r\n       * The larger number this is, the farther the track moves.\r\n       * This should be around 5 - 9.\r\n       *\r\n       * @type {number}\r\n       */\n\n      var FRICTION_REDUCER = 7;\n      /**\r\n       * The component supporting mouse drag and swipe.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var drag = function drag(Splide, Components) {\n        /**\r\n         * Store the Move component.\r\n         *\r\n         * @type {Object}\r\n         */\n        var Track = Components.Track;\n        /**\r\n         * Store the Controller component.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Controller = Components.Controller;\n        /**\r\n         * Coordinate of the track on starting drag.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var startCoord;\n        /**\r\n         * Analyzed info on starting drag.\r\n         *\r\n         * @type {Object|null}\r\n         */\n\n        var startInfo;\n        /**\r\n         * Analyzed info being updated while dragging/swiping.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var currentInfo;\n        /**\r\n         * Determine whether slides are being dragged or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var isDragging;\n        /**\r\n         * Whether the slider direction is vertical or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var isVertical = Splide.options.direction === TTB;\n        /**\r\n         * Axis for the direction.\r\n         *\r\n         * @type {string}\r\n         */\n\n        var axis = isVertical ? 'y' : 'x';\n        /**\r\n         * Drag component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Drag = {\n          /**\r\n           * Whether dragging is disabled or not.\r\n           *\r\n           * @type {boolean}\r\n           */\n          disabled: false,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            var _this = this;\n\n            var Elements = Components.Elements;\n            var track = Elements.track;\n            Splide.on('touchstart mousedown', start, track).on('touchmove mousemove', move, track, {\n              passive: false\n            }).on('touchend touchcancel mouseleave mouseup dragend', end, track).on('mounted refresh', function () {\n              // Prevent dragging an image or anchor itself.\n              each(Elements.list.querySelectorAll('img, a'), function (elm) {\n                Splide.off('dragstart', elm).on('dragstart', function (e) {\n                  e.preventDefault();\n                }, elm, {\n                  passive: false\n                });\n              });\n            }).on('mounted updated', function () {\n              _this.disabled = !Splide.options.drag;\n            });\n          }\n        };\n        /**\r\n         * Called when the track starts to be dragged.\r\n         *\r\n         * @param {TouchEvent|MouseEvent} e - TouchEvent or MouseEvent object.\r\n         */\n\n        function start(e) {\n          if (!Drag.disabled && !isDragging) {\n            // These prams are used to evaluate whether the slider should start moving.\n            init(e);\n          }\n        }\n        /**\r\n         * Initialize parameters.\r\n         *\r\n         * @param {TouchEvent|MouseEvent} e - TouchEvent or MouseEvent object.\r\n         */\n\n\n        function init(e) {\n          startCoord = Track.toCoord(Track.position);\n          startInfo = analyze(e, {});\n          currentInfo = startInfo;\n        }\n        /**\r\n         * Called while the track being dragged.\r\n         *\r\n         * @param {TouchEvent|MouseEvent} e - TouchEvent or MouseEvent object.\r\n         */\n\n\n        function move(e) {\n          if (startInfo) {\n            currentInfo = analyze(e, startInfo);\n\n            if (isDragging) {\n              if (e.cancelable) {\n                e.preventDefault();\n              }\n\n              if (!Splide.is(FADE)) {\n                var position = startCoord[axis] + currentInfo.offset[axis];\n                Track.translate(resist(position));\n              }\n            } else {\n              if (shouldMove(currentInfo)) {\n                Splide.emit('drag', startInfo);\n                isDragging = true;\n                Track.cancel(); // These params are actual drag data.\n\n                init(e);\n              }\n            }\n          }\n        }\n        /**\r\n         * Determine whether to start moving the track or not by drag angle.\r\n         *\r\n         * @param {Object} info - An information object.\r\n         *\r\n         * @return {boolean} - True if the track should be moved or false if not.\r\n         */\n\n\n        function shouldMove(_ref) {\n          var offset = _ref.offset;\n\n          if (Splide.State.is(MOVING) && Splide.options.waitForTransition) {\n            return false;\n          }\n\n          var angle = Math.atan(drag_abs(offset.y) / drag_abs(offset.x)) * 180 / Math.PI;\n\n          if (isVertical) {\n            angle = 90 - angle;\n          }\n\n          return angle < Splide.options.dragAngleThreshold;\n        }\n        /**\r\n         * Resist dragging the track on the first/last page because there is no more.\r\n         *\r\n         * @param {number} position - A position being applied to the track.\r\n         *\r\n         * @return {Object} - Adjusted position.\r\n         */\n\n\n        function resist(position) {\n          if (Splide.is(SLIDE)) {\n            var sign = Track.sign;\n\n            var _start = sign * Track.trim(Track.toPosition(0));\n\n            var _end = sign * Track.trim(Track.toPosition(Controller.edgeIndex));\n\n            position *= sign;\n\n            if (position < _start) {\n              position = _start - FRICTION_REDUCER * Math.log(_start - position);\n            } else if (position > _end) {\n              position = _end + FRICTION_REDUCER * Math.log(position - _end);\n            }\n\n            position *= sign;\n          }\n\n          return position;\n        }\n        /**\r\n         * Called when dragging ends.\r\n         */\n\n\n        function end() {\n          startInfo = null;\n\n          if (isDragging) {\n            Splide.emit('dragged', currentInfo);\n            go(currentInfo);\n            isDragging = false;\n          }\n        }\n        /**\r\n         * Go to the slide determined by the analyzed data.\r\n         *\r\n         * @param {Object} info - An info object.\r\n         */\n\n\n        function go(info) {\n          var velocity = info.velocity[axis];\n          var absV = drag_abs(velocity);\n\n          if (absV > 0) {\n            var options = Splide.options;\n            var index = Splide.index;\n            var sign = velocity < 0 ? -1 : 1;\n            var destIndex = index;\n\n            if (!Splide.is(FADE)) {\n              var destination = Track.position;\n\n              if (absV > options.flickVelocityThreshold && drag_abs(info.offset[axis]) < options.swipeDistanceThreshold) {\n                destination += sign * Math.min(absV * options.flickPower, Components.Layout.size * (options.flickMaxPages || 1));\n              }\n\n              destIndex = Track.toIndex(destination);\n            }\n            /*\r\n             * Do not allow the track to go to a previous position if there is enough velocity.\r\n             * Always use the adjacent index for the fade mode.\r\n             */\n\n\n            if (destIndex === index && absV > MIN_VELOCITY) {\n              destIndex = index + sign * Track.sign;\n            }\n\n            if (Splide.is(SLIDE)) {\n              destIndex = between(destIndex, 0, Controller.edgeIndex);\n            }\n\n            Controller.go(destIndex, options.isNavigation);\n          }\n        }\n        /**\r\n         * Analyze the given event object and return important information for handling swipe behavior.\r\n         *\r\n         * @param {Event}   e          - Touch or Mouse event object.\r\n         * @param {Object}  startInfo  - Information analyzed on start for calculating difference from the current one.\r\n         *\r\n         * @return {Object} - An object containing analyzed information, such as offset, velocity, etc.\r\n         */\n\n\n        function analyze(e, startInfo) {\n          var timeStamp = e.timeStamp,\n              touches = e.touches;\n\n          var _ref2 = touches ? touches[0] : e,\n              clientX = _ref2.clientX,\n              clientY = _ref2.clientY;\n\n          var _ref3 = startInfo.to || {},\n              _ref3$x = _ref3.x,\n              fromX = _ref3$x === void 0 ? clientX : _ref3$x,\n              _ref3$y = _ref3.y,\n              fromY = _ref3$y === void 0 ? clientY : _ref3$y;\n\n          var startTime = startInfo.time || 0;\n          var offset = {\n            x: clientX - fromX,\n            y: clientY - fromY\n          };\n          var duration = timeStamp - startTime;\n          var velocity = {\n            x: offset.x / duration,\n            y: offset.y / duration\n          };\n          return {\n            to: {\n              x: clientX,\n              y: clientY\n            },\n            offset: offset,\n            time: timeStamp,\n            velocity: velocity\n          };\n        }\n\n        return Drag;\n      }; // CONCATENATED MODULE: ./src/js/components/click/index.js\n\n      /**\r\n       * The component for handling a click event.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The component for handling a click event.\r\n       * Click should be disabled during drag/swipe.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n\n      var click = function click(Splide, Components) {\n        /**\r\n         * Whether click is disabled or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n        var disabled = false;\n        /**\r\n         * Click component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Click = {\n          /**\r\n           * Mount only when the drag is activated and the slide type is not \"fade\".\r\n           *\r\n           * @type {boolean}\r\n           */\n          required: Splide.options.drag,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            Splide.on('click', onClick, Components.Elements.track, {\n              capture: true\n            }).on('drag', function () {\n              disabled = true;\n            }).on('moved', function () {\n              disabled = false;\n            });\n          }\n        };\n        /**\r\n         * Called when a track element is clicked.\r\n         *\r\n         * @param {Event} e - A click event.\r\n         */\n\n        function onClick(e) {\n          if (disabled) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n          }\n        }\n\n        return Click;\n      }; // CONCATENATED MODULE: ./src/js/components/autoplay/index.js\n\n      /**\r\n       * The component for playing slides automatically.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Set of pause flags.\r\n       */\n\n\n      var PAUSE_FLAGS = {\n        HOVER: 1,\n        FOCUS: 2,\n        MANUAL: 3\n      };\n      /**\r\n       * The component for playing slides automatically.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       * @param {string} name       - A component name as a lowercase string.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var components_autoplay = function components_autoplay(Splide, Components, name) {\n        /**\r\n         * Store pause flags.\r\n         *\r\n         * @type {Array}\r\n         */\n        var flags = [];\n        /**\r\n         * Store an interval object.\r\n         *\r\n         * @type {Object};\r\n         */\n\n        var interval;\n        /**\r\n         * Keep the Elements component.\r\n         *\r\n         * @type {string}\r\n         */\n\n        var Elements = Components.Elements;\n        /**\r\n         * Autoplay component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Autoplay = {\n          /**\r\n           * Required only when the autoplay option is true.\r\n           *\r\n           * @type {boolean}\r\n           */\n          required: Splide.options.autoplay,\n\n          /**\r\n           * Called when the component is mounted.\r\n           * Note that autoplay starts only if there are slides over perPage number.\r\n           */\n          mount: function mount() {\n            var options = Splide.options;\n\n            if (Elements.slides.length > options.perPage) {\n              interval = createInterval(function () {\n                Splide.go('>');\n              }, options.interval, function (rate) {\n                Splide.emit(name + \":playing\", rate);\n\n                if (Elements.bar) {\n                  applyStyle(Elements.bar, {\n                    width: rate * 100 + \"%\"\n                  });\n                }\n              });\n              bind();\n              this.play();\n            }\n          },\n\n          /**\r\n           * Start autoplay.\r\n           *\r\n           * @param {number} flag - A pause flag to be removed.\r\n           */\n          play: function play(flag) {\n            if (flag === void 0) {\n              flag = 0;\n            }\n\n            flags = flags.filter(function (f) {\n              return f !== flag;\n            });\n\n            if (!flags.length) {\n              Splide.emit(name + \":play\");\n              interval.play(Splide.options.resetProgress);\n            }\n          },\n\n          /**\r\n           * Pause autoplay.\r\n           * Note that Array.includes is not supported by IE.\r\n           *\r\n           * @param {number} flag - A pause flag to be added.\r\n           */\n          pause: function pause(flag) {\n            if (flag === void 0) {\n              flag = 0;\n            }\n\n            interval.pause();\n\n            if (flags.indexOf(flag) === -1) {\n              flags.push(flag);\n            }\n\n            if (flags.length === 1) {\n              Splide.emit(name + \":pause\");\n            }\n          }\n        };\n        /**\r\n         * Listen some events.\r\n         */\n\n        function bind() {\n          var options = Splide.options;\n          var sibling = Splide.sibling;\n          var elms = [Splide.root, sibling ? sibling.root : null];\n\n          if (options.pauseOnHover) {\n            switchOn(elms, 'mouseleave', PAUSE_FLAGS.HOVER, true);\n            switchOn(elms, 'mouseenter', PAUSE_FLAGS.HOVER, false);\n          }\n\n          if (options.pauseOnFocus) {\n            switchOn(elms, 'focusout', PAUSE_FLAGS.FOCUS, true);\n            switchOn(elms, 'focusin', PAUSE_FLAGS.FOCUS, false);\n          }\n\n          if (Elements.play) {\n            Splide.on('click', function () {\n              // Need to be removed a focus flag at first.\n              Autoplay.play(PAUSE_FLAGS.FOCUS);\n              Autoplay.play(PAUSE_FLAGS.MANUAL);\n            }, Elements.play);\n          }\n\n          if (Elements.pause) {\n            switchOn([Elements.pause], 'click', PAUSE_FLAGS.MANUAL, false);\n          }\n\n          Splide.on('move refresh', function () {\n            Autoplay.play();\n          }) // Rewind the timer.\n          .on('destroy', function () {\n            Autoplay.pause();\n          });\n        }\n        /**\r\n         * Play or pause on the given event.\r\n         *\r\n         * @param {Element[]} elms  - Elements.\r\n         * @param {string}    event - An event name or names.\r\n         * @param {number}    flag  - A pause flag defined on the top.\r\n         * @param {boolean}   play  - Determine whether to play or pause.\r\n         */\n\n\n        function switchOn(elms, event, flag, play) {\n          elms.forEach(function (elm) {\n            Splide.on(event, function () {\n              Autoplay[play ? 'play' : 'pause'](flag);\n            }, elm);\n          });\n        }\n\n        return Autoplay;\n      }; // CONCATENATED MODULE: ./src/js/components/cover/index.js\n\n      /**\r\n       * The component for change an img element to background image of its wrapper.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The component for change an img element to background image of its wrapper.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n\n      var components_cover = function components_cover(Splide, Components) {\n        /**\r\n         * Hold options.\r\n         *\r\n         * @type {Object}\r\n         */\n        var options = Splide.options;\n        /**\r\n         * Cover component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Cover = {\n          /**\r\n           * Required only when \"cover\" option is true.\r\n           *\r\n           * @type {boolean}\r\n           */\n          required: options.cover,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            Splide.on('lazyload:loaded', function (img) {\n              cover(img, false);\n            });\n            Splide.on('mounted updated refresh', function () {\n              return apply(false);\n            });\n          },\n\n          /**\r\n           * Destroy.\r\n           */\n          destroy: function destroy() {\n            apply(true);\n          }\n        };\n        /**\r\n         * Apply \"cover\" to all slides.\r\n         *\r\n         * @param {boolean} uncover - If true, \"cover\" will be clear.\r\n         */\n\n        function apply(uncover) {\n          Components.Elements.each(function (Slide) {\n            var img = child(Slide.slide, 'IMG') || child(Slide.container, 'IMG');\n\n            if (img && img.src) {\n              cover(img, uncover);\n            }\n          });\n        }\n        /**\r\n         * Set background image of the parent element, using source of the given image element.\r\n         *\r\n         * @param {Element} img     - An image element.\r\n         * @param {boolean} uncover - Reset \"cover\".\r\n         */\n\n\n        function cover(img, uncover) {\n          applyStyle(img.parentElement, {\n            background: uncover ? '' : \"center/cover no-repeat url(\\\"\" + img.src + \"\\\")\"\n          });\n          applyStyle(img, {\n            display: uncover ? '' : 'none'\n          });\n        }\n\n        return Cover;\n      }; // CONCATENATED MODULE: ./src/js/components/arrows/path.js\n\n      /**\r\n       * Export vector path for an arrow.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Namespace definition for SVG element.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\n      /**\r\n       * The arrow vector path.\r\n       *\r\n       * @type {number}\r\n       */\n\n      var PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\n      /**\r\n       * SVG width and height.\r\n       *\r\n       * @type {number}\r\n       */\n\n      var SIZE = 40; // CONCATENATED MODULE: ./src/js/components/arrows/index.js\n\n      /**\r\n       * The component for appending prev/next arrows.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The component for appending prev/next arrows.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       * @param {string} name       - A component name as a lowercase string.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var components_arrows = function components_arrows(Splide, Components, name) {\n        /**\r\n         * Previous arrow element.\r\n         *\r\n         * @type {Element|undefined}\r\n         */\n        var prev;\n        /**\r\n         * Next arrow element.\r\n         *\r\n         * @type {Element|undefined}\r\n         */\n\n        var next;\n        /**\r\n         * Store the class list.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var classes = Splide.classes;\n        /**\r\n         * Hold the root element.\r\n         *\r\n         * @type {Element}\r\n         */\n\n        var root = Splide.root;\n        /**\r\n         * Whether arrows are created programmatically or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var created;\n        /**\r\n         * Hold the Elements component.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Elements = Components.Elements;\n        /**\r\n         * Arrows component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Arrows = {\n          /**\r\n           * Required when the arrows option is true.\r\n           *\r\n           * @type {boolean}\r\n           */\n          required: Splide.options.arrows,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            // Attempt to get arrows from HTML source.\n            prev = Elements.arrows.prev;\n            next = Elements.arrows.next; // If arrows were not found in HTML, let's generate them.\n\n            if ((!prev || !next) && Splide.options.arrows) {\n              prev = createArrow(true);\n              next = createArrow(false);\n              created = true;\n              appendArrows();\n            }\n\n            if (prev && next) {\n              bind();\n            }\n\n            this.arrows = {\n              prev: prev,\n              next: next\n            };\n          },\n\n          /**\r\n           * Called after all components are mounted.\r\n           */\n          mounted: function mounted() {\n            Splide.emit(name + \":mounted\", prev, next);\n          },\n\n          /**\r\n           * Destroy.\r\n           */\n          destroy: function destroy() {\n            removeAttribute([prev, next], 'disabled');\n\n            if (created) {\n              dom_remove(prev.parentElement);\n            }\n          }\n        };\n        /**\r\n         * Listen to native and custom events.\r\n         */\n\n        function bind() {\n          Splide.on('click', function () {\n            Splide.go('<');\n          }, prev).on('click', function () {\n            Splide.go('>');\n          }, next).on('mounted move updated refresh', updateDisabled);\n        }\n        /**\r\n         * Update a disabled attribute.\r\n         */\n\n\n        function updateDisabled() {\n          var _Components$Controlle = Components.Controller,\n              prevIndex = _Components$Controlle.prevIndex,\n              nextIndex = _Components$Controlle.nextIndex;\n          var isEnough = Splide.length > Splide.options.perPage || Splide.is(LOOP);\n          prev.disabled = prevIndex < 0 || !isEnough;\n          next.disabled = nextIndex < 0 || !isEnough;\n          Splide.emit(name + \":updated\", prev, next, prevIndex, nextIndex);\n        }\n        /**\r\n         * Create a wrapper element and append arrows.\r\n         */\n\n\n        function appendArrows() {\n          var wrapper = create('div', {\n            \"class\": classes.arrows\n          });\n          append(wrapper, prev);\n          append(wrapper, next);\n          var slider = Elements.slider;\n          var parent = Splide.options.arrows === 'slider' && slider ? slider : root;\n          before(wrapper, parent.firstElementChild);\n        }\n        /**\r\n         * Create an arrow element.\r\n         *\r\n         * @param {boolean} prev - Determine to create a prev arrow or next arrow.\r\n         *\r\n         * @return {Element} - A created arrow element.\r\n         */\n\n\n        function createArrow(prev) {\n          var arrow = \"<button class=\\\"\" + classes.arrow + \" \" + (prev ? classes.prev : classes.next) + \"\\\" type=\\\"button\\\">\" + (\"<svg xmlns=\\\"\" + XML_NAME_SPACE + \"\\\"\\tviewBox=\\\"0 0 \" + SIZE + \" \" + SIZE + \"\\\"\\twidth=\\\"\" + SIZE + \"\\\"\\theight=\\\"\" + SIZE + \"\\\">\") + (\"<path d=\\\"\" + (Splide.options.arrowPath || PATH) + \"\\\" />\");\n          return domify(arrow);\n        }\n\n        return Arrows;\n      }; // CONCATENATED MODULE: ./src/js/components/pagination/index.js\n\n      /**\r\n       * The component for handling pagination\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The event name for updating some attributes of pagination nodes.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var ATTRIBUTES_UPDATE_EVENT = 'move.page';\n      /**\r\n       * The event name for recreating pagination.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var UPDATE_EVENT = 'updated.page refresh.page';\n      /**\r\n       * The component for handling pagination\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       * @param {string} name       - A component name as a lowercase string.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var components_pagination = function components_pagination(Splide, Components, name) {\n        /**\r\n         * Store all data for pagination.\r\n         * - list: A list element.\r\n         * - items: An array that contains objects(li, button, index, page).\r\n         *\r\n         * @type {Object}\r\n         */\n        var data = {};\n        /**\r\n         * Hold the Elements component.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Elements = Components.Elements;\n        /**\r\n         * Pagination component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Pagination = {\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            var pagination = Splide.options.pagination;\n\n            if (pagination) {\n              data = createPagination();\n              var slider = Elements.slider;\n              var parent = pagination === 'slider' && slider ? slider : Splide.root;\n              append(parent, data.list);\n              Splide.on(ATTRIBUTES_UPDATE_EVENT, updateAttributes);\n            }\n\n            Splide.off(UPDATE_EVENT).on(UPDATE_EVENT, function () {\n              Pagination.destroy();\n\n              if (Splide.options.pagination) {\n                Pagination.mount();\n                Pagination.mounted();\n              }\n            });\n          },\n\n          /**\r\n           * Called after all components are mounted.\r\n           */\n          mounted: function mounted() {\n            if (Splide.options.pagination) {\n              var index = Splide.index;\n              Splide.emit(name + \":mounted\", data, this.getItem(index));\n              updateAttributes(index, -1);\n            }\n          },\n\n          /**\r\n           * Destroy the pagination.\r\n           * Be aware that node.remove() is not supported by IE.\r\n           */\n          destroy: function destroy() {\n            dom_remove(data.list);\n\n            if (data.items) {\n              data.items.forEach(function (item) {\n                Splide.off('click', item.button);\n              });\n            } // Do not remove UPDATE_EVENT to recreate pagination if needed.\n\n\n            Splide.off(ATTRIBUTES_UPDATE_EVENT);\n            data = {};\n          },\n\n          /**\r\n           * Return an item by index.\r\n           *\r\n           * @param {number} index - A slide index.\r\n           *\r\n           * @return {Object|undefined} - An item object on success or undefined on failure.\r\n           */\n          getItem: function getItem(index) {\n            return data.items[Components.Controller.toPage(index)];\n          },\n\n          /**\r\n           * Return object containing pagination data.\r\n           *\r\n           * @return {Object} - Pagination data including list and items.\r\n           */\n          get data() {\n            return data;\n          }\n\n        };\n        /**\r\n         * Update attributes.\r\n         *\r\n         * @param {number} index     - Active index.\r\n         * @param {number} prevIndex - Prev index.\r\n         */\n\n        function updateAttributes(index, prevIndex) {\n          var prev = Pagination.getItem(prevIndex);\n          var curr = Pagination.getItem(index);\n          var active = STATUS_CLASSES.active;\n\n          if (prev) {\n            removeClass(prev.button, active);\n          }\n\n          if (curr) {\n            addClass(curr.button, active);\n          }\n\n          Splide.emit(name + \":updated\", data, prev, curr);\n        }\n        /**\r\n         * Create a wrapper and button elements.\r\n         *\r\n         * @return {Object} - An object contains all data.\r\n         */\n\n\n        function createPagination() {\n          var options = Splide.options;\n          var classes = Splide.classes;\n          var list = create('ul', {\n            \"class\": classes.pagination\n          });\n          var items = Elements.getSlides(false).filter(function (Slide) {\n            return options.focus !== false || Slide.index % options.perPage === 0;\n          }).map(function (Slide, page) {\n            var li = create('li', {});\n            var button = create('button', {\n              \"class\": classes.page,\n              type: 'button'\n            });\n            append(li, button);\n            append(list, li);\n            Splide.on('click', function () {\n              Splide.go(\">\" + page);\n            }, button);\n            return {\n              li: li,\n              button: button,\n              page: page,\n              Slides: Elements.getSlidesByPage(page)\n            };\n          });\n          return {\n            list: list,\n            items: items\n          };\n        }\n\n        return Pagination;\n      }; // CONCATENATED MODULE: ./src/js/components/lazyload/index.js\n\n      /**\r\n       * The component for loading slider images lazily.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The name for a data attribute of src.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var SRC_DATA_NAME = 'data-splide-lazy';\n      /**\r\n       * The name for a data attribute of srcset.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var SRCSET_DATA_NAME = 'data-splide-lazy-srcset';\n      /**\r\n       * The component for loading slider images lazily.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       * @param {string} name       - A component name as a lowercase string.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var lazyload = function lazyload(Splide, Components, name) {\n        /**\r\n         * Next index for sequential loading.\r\n         *\r\n         * @type {number}\r\n         */\n        var nextIndex;\n        /**\r\n         * Store objects containing an img element and a Slide object.\r\n         *\r\n         * @type {Object[]}\r\n         */\n\n        var images;\n        /**\r\n         * Store the options.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var options = Splide.options;\n        /**\r\n         * Whether to load images sequentially or not.\r\n         *\r\n         * @type {boolean}\r\n         */\n\n        var isSequential = options.lazyLoad === 'sequential';\n        /**\r\n         * Lazyload component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Lazyload = {\n          /**\r\n           * Mount only when the lazyload option is provided.\r\n           *\r\n           * @type {boolean}\r\n           */\n          required: options.lazyLoad,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            Splide.on('mounted refresh', function () {\n              init();\n              Components.Elements.each(function (Slide) {\n                each(Slide.slide.querySelectorAll(\"[\" + SRC_DATA_NAME + \"], [\" + SRCSET_DATA_NAME + \"]\"), function (img) {\n                  if (!img.src && !img.srcset) {\n                    images.push({\n                      img: img,\n                      Slide: Slide\n                    });\n                    applyStyle(img, {\n                      display: 'none'\n                    });\n                  }\n                });\n              });\n\n              if (isSequential) {\n                loadNext();\n              }\n            });\n\n            if (!isSequential) {\n              Splide.on(\"mounted refresh moved.\" + name, check);\n            }\n          },\n\n          /**\r\n           * Destroy.\r\n           */\n          destroy: init\n        };\n        /**\r\n         * Initialize parameters.\r\n         */\n\n        function init() {\n          images = [];\n          nextIndex = 0;\n        }\n        /**\r\n         * Check how close each image is from the active slide and\r\n         * determine whether to start loading or not, according to the distance.\r\n         *\r\n         * @param {number} index - Current index.\r\n         */\n\n\n        function check(index) {\n          index = isNaN(index) ? Splide.index : index;\n          images = images.filter(function (image) {\n            if (image.Slide.isWithin(index, options.perPage * (options.preloadPages + 1))) {\n              load(image.img, image.Slide);\n              return false;\n            }\n\n            return true;\n          }); // Unbind if all images are loaded.\n\n          if (!images[0]) {\n            Splide.off(\"moved.\" + name);\n          }\n        }\n        /**\r\n         * Start loading an image.\r\n         * Creating a clone of the image element since setting src attribute directly to it\r\n         * often occurs 'hitch', blocking some other processes of a browser.\r\n         *\r\n         * @param {Element} img   - An image element.\r\n         * @param {Object}  Slide - A Slide object.\r\n         */\n\n\n        function load(img, Slide) {\n          addClass(Slide.slide, STATUS_CLASSES.loading);\n          var spinner = create('span', {\n            \"class\": Splide.classes.spinner\n          });\n          append(img.parentElement, spinner);\n\n          img.onload = function () {\n            loaded(img, spinner, Slide, false);\n          };\n\n          img.onerror = function () {\n            loaded(img, spinner, Slide, true);\n          };\n\n          setAttribute(img, 'srcset', getAttribute(img, SRCSET_DATA_NAME) || '');\n          setAttribute(img, 'src', getAttribute(img, SRC_DATA_NAME) || '');\n        }\n        /**\r\n         * Start loading a next image in images array.\r\n         */\n\n\n        function loadNext() {\n          if (nextIndex < images.length) {\n            var image = images[nextIndex];\n            load(image.img, image.Slide);\n          }\n\n          nextIndex++;\n        }\n        /**\r\n         * Called just after the image was loaded or loading was aborted by some error.\r\n         *\r\n         * @param {Element} img     - An image element.\r\n         * @param {Element} spinner - A spinner element.\r\n         * @param {Object}  Slide   - A Slide object.\r\n         * @param {boolean} error   - True if the image was loaded successfully or false on error.\r\n         */\n\n\n        function loaded(img, spinner, Slide, error) {\n          removeClass(Slide.slide, STATUS_CLASSES.loading);\n\n          if (!error) {\n            dom_remove(spinner);\n            applyStyle(img, {\n              display: ''\n            });\n            Splide.emit(name + \":loaded\", img).emit('resize');\n          }\n\n          if (isSequential) {\n            loadNext();\n          }\n        }\n\n        return Lazyload;\n      }; // CONCATENATED MODULE: ./src/js/constants/a11y.js\n\n      /**\r\n       * Export aria attribute names.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Attribute name for aria-current.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var ARIA_CURRENRT = 'aria-current';\n      /**\r\n       * Attribute name for aria-control.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var ARIA_CONTROLS = 'aria-controls';\n      /**\r\n       * Attribute name for aria-control.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var ARIA_LABEL = 'aria-label';\n      /**\r\n       * Attribute name for aria-labelledby.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var ARIA_LABELLEDBY = 'aria-labelledby';\n      /**\r\n       * Attribute name for aria-hidden.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var ARIA_HIDDEN = 'aria-hidden';\n      /**\r\n       * Attribute name for tab-index.\r\n       *\r\n       * @type {string}\r\n       */\n\n      var TAB_INDEX = 'tabindex'; // CONCATENATED MODULE: ./src/js/components/keyboard/index.js\n\n      /**\r\n       * The component for controlling slides via keyboard.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Map a key to a slide control.\r\n       *\r\n       * @type {Object}\r\n       */\n\n      var KEY_MAP = {\n        ltr: {\n          ArrowLeft: '<',\n          ArrowRight: '>',\n          // For IE.\n          Left: '<',\n          Right: '>'\n        },\n        rtl: {\n          ArrowLeft: '>',\n          ArrowRight: '<',\n          // For IE.\n          Left: '>',\n          Right: '<'\n        },\n        ttb: {\n          ArrowUp: '<',\n          ArrowDown: '>',\n          // For IE.\n          Up: '<',\n          Down: '>'\n        }\n      };\n      /**\r\n       * The component for controlling slides via keyboard.\r\n       *\r\n       * @param {Splide} Splide - A Splide instance.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var components_keyboard = function components_keyboard(Splide) {\n        /**\r\n         * Hold the target element.\r\n         *\r\n         * @type {Element|Document|undefined}\r\n         */\n        var target;\n        return {\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            Splide.on('mounted updated', function () {\n              var options = Splide.options;\n              var root = Splide.root;\n              var map = KEY_MAP[options.direction];\n              var keyboard = options.keyboard;\n\n              if (target) {\n                Splide.off('keydown', target);\n                removeAttribute(root, TAB_INDEX);\n              }\n\n              if (keyboard) {\n                if (keyboard === 'focused') {\n                  target = root;\n                  setAttribute(root, TAB_INDEX, 0);\n                } else {\n                  target = document;\n                }\n\n                Splide.on('keydown', function (e) {\n                  if (map[e.key]) {\n                    Splide.go(map[e.key]);\n                  }\n                }, target);\n              }\n            });\n          }\n        };\n      }; // CONCATENATED MODULE: ./src/js/components/a11y/index.js\n\n      /**\r\n       * The component for enhancing accessibility.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The component for enhancing accessibility.\r\n       *\r\n       * @param {Splide} Splide     - A Splide instance.\r\n       * @param {Object} Components - An object containing components.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n\n      var a11y = function a11y(Splide, Components) {\n        /**\r\n         * Hold a i18n object.\r\n         *\r\n         * @type {Object}\r\n         */\n        var i18n = Splide.i18n;\n        /**\r\n         * Hold the Elements component.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Elements = Components.Elements;\n        /**\r\n         * All attributes related with A11y.\r\n         *\r\n         * @type {string[]}\r\n         */\n\n        var allAttributes = [ARIA_HIDDEN, TAB_INDEX, ARIA_CONTROLS, ARIA_LABEL, ARIA_CURRENRT, 'role'];\n        /**\r\n         * A11y component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var A11y = {\n          /**\r\n           * Required only when the accessibility option is true.\r\n           *\r\n           * @type {boolean}\r\n           */\n          required: Splide.options.accessibility,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            Splide.on('visible', function (Slide) {\n              updateSlide(Slide.slide, true);\n            }).on('hidden', function (Slide) {\n              updateSlide(Slide.slide, false);\n            }).on('arrows:mounted', initArrows).on('arrows:updated', updateArrows).on('pagination:mounted', initPagination).on('pagination:updated', updatePagination).on('refresh', function () {\n              removeAttribute(Components.Clones.clones, allAttributes);\n            });\n\n            if (Splide.options.isNavigation) {\n              Splide.on('navigation:mounted navigation:updated', initNavigation).on('active', function (Slide) {\n                updateNavigation(Slide, true);\n              }).on('inactive', function (Slide) {\n                updateNavigation(Slide, false);\n              });\n            }\n\n            initAutoplay();\n          },\n\n          /**\r\n           * Destroy.\r\n           */\n          destroy: function destroy() {\n            var Arrows = Components.Arrows;\n            var arrows = Arrows ? Arrows.arrows : {};\n            removeAttribute(Elements.slides.concat([arrows.prev, arrows.next, Elements.play, Elements.pause]), allAttributes);\n          }\n        };\n        /**\r\n         * Update slide attributes when it gets visible or hidden.\r\n         *\r\n         * @param {Element} slide   - A slide element.\r\n         * @param {Boolean} visible - True when the slide gets visible, or false when hidden.\r\n         */\n\n        function updateSlide(slide, visible) {\n          setAttribute(slide, ARIA_HIDDEN, !visible);\n\n          if (Splide.options.slideFocus) {\n            setAttribute(slide, TAB_INDEX, visible ? 0 : -1);\n          }\n        }\n        /**\r\n         * Initialize arrows if they are available.\r\n         * Append screen reader elements and add aria-controls attribute.\r\n         *\r\n         * @param {Element} prev - Previous arrow element.\r\n         * @param {Element} next - Next arrow element.\r\n         */\n\n\n        function initArrows(prev, next) {\n          var controls = Elements.track.id;\n          setAttribute(prev, ARIA_CONTROLS, controls);\n          setAttribute(next, ARIA_CONTROLS, controls);\n        }\n        /**\r\n         * Update arrow attributes.\r\n         *\r\n         * @param {Element} prev      - Previous arrow element.\r\n         * @param {Element} next      - Next arrow element.\r\n         * @param {number}  prevIndex - Previous slide index or -1 when there is no precede slide.\r\n         * @param {number}  nextIndex - Next slide index or -1 when there is no next slide.\r\n         */\n\n\n        function updateArrows(prev, next, prevIndex, nextIndex) {\n          var index = Splide.index;\n          var prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\n          var nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\n          setAttribute(prev, ARIA_LABEL, prevLabel);\n          setAttribute(next, ARIA_LABEL, nextLabel);\n        }\n        /**\r\n         * Initialize pagination if it's available.\r\n         * Append a screen reader element and add aria-controls/label attribute to each item.\r\n         *\r\n         * @param {Object} data       - Data object containing all items.\r\n         * @param {Object} activeItem - An initial active item.\r\n         */\n\n\n        function initPagination(data, activeItem) {\n          if (activeItem) {\n            setAttribute(activeItem.button, ARIA_CURRENRT, true);\n          }\n\n          data.items.forEach(function (item) {\n            var options = Splide.options;\n            var text = options.focus === false && options.perPage > 1 ? i18n.pageX : i18n.slideX;\n            var label = sprintf(text, item.page + 1);\n            var button = item.button;\n            var controls = item.Slides.map(function (Slide) {\n              return Slide.slide.id;\n            });\n            setAttribute(button, ARIA_CONTROLS, controls.join(' '));\n            setAttribute(button, ARIA_LABEL, label);\n          });\n        }\n        /**\r\n         * Update pagination attributes.\r\n         *\r\n         * @param {Object}  data - Data object containing all items.\r\n         * @param {Element} prev - A previous active element.\r\n         * @param {Element} curr - A current active element.\r\n         */\n\n\n        function updatePagination(data, prev, curr) {\n          if (prev) {\n            removeAttribute(prev.button, ARIA_CURRENRT);\n          }\n\n          if (curr) {\n            setAttribute(curr.button, ARIA_CURRENRT, true);\n          }\n        }\n        /**\r\n         * Initialize autoplay buttons.\r\n         */\n\n\n        function initAutoplay() {\n          ['play', 'pause'].forEach(function (name) {\n            var elm = Elements[name];\n\n            if (elm) {\n              if (!isButton(elm)) {\n                setAttribute(elm, 'role', 'button');\n              }\n\n              setAttribute(elm, ARIA_CONTROLS, Elements.track.id);\n              setAttribute(elm, ARIA_LABEL, i18n[name]);\n            }\n          });\n        }\n        /**\r\n         * Initialize navigation slider.\r\n         * Add button role, aria-label, aria-controls to slide elements and append screen reader text to them.\r\n         *\r\n         * @param {Splide} main - A main Splide instance.\r\n         */\n\n\n        function initNavigation(main) {\n          Elements.each(function (Slide) {\n            var slide = Slide.slide;\n            var realIndex = Slide.realIndex;\n\n            if (!isButton(slide)) {\n              setAttribute(slide, 'role', 'button');\n            }\n\n            var slideIndex = realIndex > -1 ? realIndex : Slide.index;\n            var label = sprintf(i18n.slideX, slideIndex + 1);\n            var mainSlide = main.Components.Elements.getSlide(slideIndex);\n            setAttribute(slide, ARIA_LABEL, label);\n\n            if (mainSlide) {\n              setAttribute(slide, ARIA_CONTROLS, mainSlide.slide.id);\n            }\n          });\n        }\n        /**\r\n         * Update navigation attributes.\r\n         *\r\n         * @param {Object}  Slide  - A target Slide object.\r\n         * @param {boolean} active - True if the slide is active or false if inactive.\r\n         */\n\n\n        function updateNavigation(_ref, active) {\n          var slide = _ref.slide;\n\n          if (active) {\n            setAttribute(slide, ARIA_CURRENRT, true);\n          } else {\n            removeAttribute(slide, ARIA_CURRENRT);\n          }\n        }\n        /**\r\n         * Check if the given element is button or not.\r\n         *\r\n         * @param {Element} elm - An element to be checked.\r\n         *\r\n         * @return {boolean} - True if the given element is button.\r\n         */\n\n\n        function isButton(elm) {\n          return elm.tagName === 'BUTTON';\n        }\n\n        return A11y;\n      }; // CONCATENATED MODULE: ./src/js/components/sync/index.js\n\n      /**\r\n       * The component for synchronizing a slider with another.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * The event name for sync.\r\n       *\r\n       * @type {string}\r\n       */\n\n\n      var SYNC_EVENT = 'move.sync';\n      /**\r\n       * The event names for click navigation.\r\n       * @type {string}\r\n       */\n\n      var CLICK_EVENTS = 'mouseup touchend';\n      /**\r\n       * The keys for triggering the navigation button.\r\n       *\r\n       * @type {String[]}\r\n       */\n\n      var TRIGGER_KEYS = [' ', 'Enter', 'Spacebar'];\n      /**\r\n       * The component for synchronizing a slider with another.\r\n       *\r\n       * @param {Splide} Splide - A Splide instance.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var sync = function sync(Splide) {\n        /**\r\n         * Keep the sibling Splide instance.\r\n         *\r\n         * @type {Splide}\r\n         */\n        var sibling = Splide.sibling;\n        /**\r\n         * Whether the sibling slider is navigation or not.\r\n         *\r\n         * @type {Splide|boolean}\r\n         */\n\n        var isNavigation = sibling && sibling.options.isNavigation;\n        /**\r\n         * Layout component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Sync = {\n          /**\r\n           * Required only when the sub slider is available.\r\n           *\r\n           * @type {boolean}\r\n           */\n          required: !!sibling,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            syncMain();\n            syncSibling();\n\n            if (isNavigation) {\n              bind();\n              Splide.on('refresh', function () {\n                setTimeout(function () {\n                  bind();\n                  sibling.emit('navigation:updated', Splide);\n                });\n              });\n            }\n          },\n\n          /**\r\n           * Called after all components are mounted.\r\n           */\n          mounted: function mounted() {\n            if (isNavigation) {\n              sibling.emit('navigation:mounted', Splide);\n            }\n          }\n        };\n        /**\r\n         * Listen the primary slider event to move secondary one.\r\n         * Must unbind a handler at first to avoid infinite loop.\r\n         */\n\n        function syncMain() {\n          Splide.on(SYNC_EVENT, function (newIndex, prevIndex, destIndex) {\n            sibling.off(SYNC_EVENT).go(sibling.is(LOOP) ? destIndex : newIndex, false);\n            syncSibling();\n          });\n        }\n        /**\r\n         * Listen the secondary slider event to move primary one.\r\n         * Must unbind a handler at first to avoid infinite loop.\r\n         */\n\n\n        function syncSibling() {\n          sibling.on(SYNC_EVENT, function (newIndex, prevIndex, destIndex) {\n            Splide.off(SYNC_EVENT).go(Splide.is(LOOP) ? destIndex : newIndex, false);\n            syncMain();\n          });\n        }\n        /**\r\n         * Listen some events on each slide.\r\n         */\n\n\n        function bind() {\n          sibling.Components.Elements.each(function (_ref) {\n            var slide = _ref.slide,\n                index = _ref.index;\n            /*\r\n             * Listen mouseup and touchend events to handle click.\r\n             */\n\n            Splide.off(CLICK_EVENTS, slide).on(CLICK_EVENTS, function (e) {\n              // Ignore a middle or right click.\n              if (!e.button || e.button === 0) {\n                moveSibling(index);\n              }\n            }, slide);\n            /*\r\n             * Subscribe keyup to handle Enter and Space key.\r\n             * Note that Array.includes is not supported by IE.\r\n             */\n\n            Splide.off('keyup', slide).on('keyup', function (e) {\n              if (TRIGGER_KEYS.indexOf(e.key) > -1) {\n                e.preventDefault();\n                moveSibling(index);\n              }\n            }, slide, {\n              passive: false\n            });\n          });\n        }\n        /**\r\n         * Move the sibling to the given index.\r\n         * Need to check \"IDLE\" status because slides can be moving by Drag component.\r\n         *\r\n         * @param {number} index - Target index.\r\n         */\n\n\n        function moveSibling(index) {\n          if (Splide.State.is(IDLE)) {\n            sibling.go(index);\n          }\n        }\n\n        return Sync;\n      }; // CONCATENATED MODULE: ./src/js/components/breakpoints/index.js\n\n      /**\r\n       * The component for updating options according to a current window width.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Interval time for throttle.\r\n       *\r\n       * @type {number}\r\n       */\n\n\n      var THROTTLE = 50;\n      /**\r\n       * The component for updating options according to a current window width.\r\n       *\r\n       * @param {Splide} Splide - A Splide instance.\r\n       *\r\n       * @return {Object} - The component object.\r\n       */\n\n      /* harmony default export */\n\n      var components_breakpoints = function components_breakpoints(Splide) {\n        /**\r\n         * Store breakpoints.\r\n         *\r\n         * @type {Object|boolean}\r\n         */\n        var breakpoints = Splide.options.breakpoints;\n        /**\r\n         * The check function whose frequency of call is reduced.\r\n         *\r\n         * @type {Function}\r\n         */\n\n        var throttledCheck = throttle(check, THROTTLE);\n        /**\r\n         * Keep initial options.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var initialOptions;\n        /**\r\n         * An array containing objects of point and MediaQueryList.\r\n         *\r\n         * @type {Object[]}\r\n         */\n\n        var map = [];\n        /**\r\n         * Hold the previous breakpoint.\r\n         *\r\n         * @type {number|undefined}\r\n         */\n\n        var prevPoint;\n        /**\r\n         * Breakpoints component object.\r\n         *\r\n         * @type {Object}\r\n         */\n\n        var Breakpoints = {\n          /**\r\n           * Required only when the breakpoints definition is provided and browser supports matchMedia.\r\n           *\r\n           * @type {boolean}\r\n           */\n          required: breakpoints && matchMedia,\n\n          /**\r\n           * Called when the component is mounted.\r\n           */\n          mount: function mount() {\n            map = Object.keys(breakpoints).sort(function (n, m) {\n              return +n - +m;\n            }).map(function (point) {\n              return {\n                point: point,\n                mql: matchMedia(\"(max-width:\" + point + \"px)\")\n              };\n            });\n            /*\r\n             * To keep monitoring resize event after destruction without \"completely\",\r\n             * use native addEventListener instead of Splide.on.\r\n             */\n\n            this.destroy(true);\n            addEventListener('resize', throttledCheck); // Keep initial options to apply them when no breakpoint matches.\n\n            initialOptions = Splide.options;\n            check();\n          },\n\n          /**\r\n           * Destroy.\r\n           *\r\n           * @param {boolean} completely - Whether to destroy Splide completely.\r\n           */\n          destroy: function destroy(completely) {\n            if (completely) {\n              removeEventListener('resize', throttledCheck);\n            }\n          }\n        };\n        /**\r\n         * Check the breakpoint.\r\n         */\n\n        function check() {\n          var point = getPoint();\n\n          if (point !== prevPoint) {\n            prevPoint = point;\n            var State = Splide.State;\n            var options = breakpoints[point] || initialOptions;\n            var destroy = options.destroy;\n\n            if (destroy) {\n              Splide.options = initialOptions;\n              Splide.destroy(destroy === 'completely');\n            } else {\n              if (State.is(DESTROYED)) {\n                Splide.mount();\n              }\n\n              Splide.options = options;\n            }\n          }\n        }\n        /**\r\n         * Return the breakpoint matching current window width.\r\n         * Note that Array.prototype.find is not supported by IE.\r\n         *\r\n         * @return {number|string} - A breakpoint as number or string. -1 if no point matches.\r\n         */\n\n\n        function getPoint() {\n          var item = map.filter(function (item) {\n            return item.mql.matches;\n          })[0];\n          return item ? item.point : -1;\n        }\n\n        return Breakpoints;\n      }; // CONCATENATED MODULE: ./src/js/components/index.js\n\n      /**\r\n       * Export components.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n\n      var COMPLETE = {\n        Options: components_options,\n        Breakpoints: components_breakpoints,\n        Controller: controller,\n        Elements: components_elements,\n        Track: components_track,\n        Clones: components_clones,\n        Layout: layout,\n        Drag: drag,\n        Click: click,\n        Autoplay: components_autoplay,\n        Cover: components_cover,\n        Arrows: components_arrows,\n        Pagination: components_pagination,\n        LazyLoad: lazyload,\n        Keyboard: components_keyboard,\n        Sync: sync,\n        A11y: a11y\n      };\n      var LIGHT = {\n        Options: components_options,\n        Controller: controller,\n        Elements: components_elements,\n        Track: components_track,\n        Clones: components_clones,\n        Layout: layout,\n        Drag: drag,\n        Click: click,\n        Arrows: components_arrows,\n        Pagination: components_pagination,\n        A11y: a11y\n      }; // CONCATENATED MODULE: ./build/module/module.js\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n        subClass.__proto__ = superClass;\n      }\n      /**\r\n       * Export Splide class for import.\r\n       *\r\n       * @author    Naotoshi Fujita\r\n       * @copyright Naotoshi Fujita. All rights reserved.\r\n       */\n\n      /**\r\n       * Export Splide class for import from other projects.\r\n       */\n\n\n      var module_Splide = /*#__PURE__*/function (_Core) {\n        _inheritsLoose(Splide, _Core);\n\n        function Splide(root, options) {\n          return _Core.call(this, root, options, COMPLETE) || this;\n        }\n\n        return Splide;\n      }(splide_Splide);\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});"],"sourceRoot":""}